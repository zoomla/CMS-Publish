@using System.Data
@using System.Web
@using ZoomLa.Model
@using ZoomLa.BLL.SYS
@using ZoomLa.Common
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using ZoomLa.SQLDAL.SQL
@using ZoomLa.BLL.Helper
@model ZoomLaCMS.Areas.Admin.Models.VM_Label
@{
    B_Label labelBll = new B_Label();
    string bread = "添加新标签";
    ViewBag.cateDT = new B_Label().GetLabelCateListXML();

    if (!string.IsNullOrEmpty(Model.labelMod.LabelName))
    {
        bread =Model.labelMod.LabelName;
    }
}
@section head{
<script src="/Plugins/Third/bootstrap-select/js/bootstrap-select.js"></script>
<link href="/Plugins/Third/bootstrap-select/css/bootstrap-select.css" rel="stylesheet" />
<style>
.opname { position: absolute; width: 100px; font-weight: bolder; }
.field_wrap { width: 150px; display: inline-block; position: relative; border: 1px solid #ddd; border-right: none; }
.editor { width: 100%; max-width: 100%; height: 530px; }
#label_left { width: 420px; height: 536px; max-width: 450px; overflow-y: auto; padding: 0px; text-align: center; float: left; }
#label_right { padding: 0px; margin-left: 425px; border-left: 1px solid #ddd; }
.labelhtml_no { display: none; }    
#label_menu {flex-wrap: wrap;}
#label_menu a {display: inline-flex;justify-content: center;align-items: center;width: 30px;height: 30px;color: black;padding: 2px;margin: 0 2px;text-decoration: none;user-select: none;}
#label_menu span {font-weight: 600;user-select: none;}
</style>
<title>静态标签</title>
}
@section content{
@Call.SetBread(new Bread[] { 
new Bread("{admin}"),
new Bread("LabelManage","标签管理"),
new Bread(Context.Request.RawUrl(),bread)

})
<form method="post" id="form1">
    <div style="display:none;">
        <input type="submit" ID="Save_Btn" name="Save_Btn" Text="保存" v-on:click="save();" />
    </div>
    <div class="" id="app">
        @Html.Partial("LabelSql_0", Model)
        @Html.Partial("LabelSql_3", Model)
    </div>
</form>

<div class="modal fade" id="label_modal" tabindex="-1" aria-labelledby="tag_dialog_title" style="display: none;" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <div class="h5 modal-title" id="label_modal_title"></div>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">
                </button>
            </div>
            <div class="modal-body" style="height:auto;overflow-y:auto;" id="label_modal_body">
                <iframe id="label_modal_iframe" style="width:100%;"></iframe>
            </div>
            <div class="modal-footer" id="label_modal_footer">
                <button id="label_modal_submit" class="btn btn-outline-info">引用</button>
            </div>
        </div>
    </div>
</div>
}
@section script{
<script src="/js/Plugs/base64.js"></script>
<script src="/js/jquery.validate.min.js"></script>
<script src="/js/Controls/ZL_Dialog.js"></script>
<script src="/js/Controls/ZL_Array.js"></script>
<script src="/js/ICMS/LabelCall.js?v=12"></script>
<script src="/res/vue/vue.js"></script>
<script src="/js/Modal/APIResult.js"></script>
<script src="/js/jquery.form.js"></script>
<script src="/res/js/bootstrap.bundle.min.js"></script>
<script>
// 创建模态框全局变量，用于LabelCall.js调用
var labelModal = new bootstrap.Modal(document.getElementById('label_modal'), {});
    var app = new Vue({
        el: "#app",
        created:function(){
        },
        methods: {
            //保存标签
            save: function () {
                //检测各个参数是否正常填写
                var ref = this;
                $("#ds_hid").val(JSON.stringify(ref.model.DataSourceType));
                //$("#form1").submit();
                labelEditor.save();
                $("#form1").ajaxSubmit({
                    url: "@MVCHelper.GetAction("LabelHtml_Save",Context.Request)", success: function (data) {
                        var model=APIResult.getModel(data);
                        if(APIResult.isok(model)){
                            var labelId=$("#labelId_hid").val();
                            if (labelId == "0") { cmsAlert("标签保存成功,即将返回列表页", function () { location = "LabelManage"; });}
                            else{ cmsAlert("标签修改成功");}

                        }
                        else{cmsAlert("保存失败:"+model.retmsg);}
                    }
                });
            },
            changeStep: function (step) {
                this.step = step;
                this.stepCallBack();
            },
            next: function () {
                this.step=3;
                this.stepCallBack();
            },
            pre: function () {
                this.step=0;
            },
            stepCallBack: function () {
                if (this.step == "3" && this.step3_inited == false) {
                    setTimeout(function () { labelMDEditor.init($("#textContent").val()); }, 100);
                    this.step3_inited = true;
                    $("#lblSys div").each(function () {
                        $(this).click(function () {
                            insertText($(this).attr("code"));
                        });
                    });
                    $("#lblFun div").each(function () {
                        $(this).click(function () {
                            insertText($(this).attr("code"));
                        });
                    });
                    $("#editor")
                        .on("dragover", false)
                        .on("dragenter", false)
                        .on("drop", function(e){
                            var txt = e.originalEvent.dataTransfer.getData("text");
                            insertText(txt);
                        });
                }
                if(this.step=="3")
                {
                }

            },
            cancel: function () {
                if (!confirm("确定要退出编辑吗?")) { return false; }
                location = "LabelManage";
            }
        },
        data: {
            step: 0,
            step3_inited: false,//初始化次编辑器
            //标签模型
            model: @Html.Raw(JsonConvert.SerializeObject(Model.labelMod,new JsonSerializerSettings() {ContractResolver =new LimitPropsContractResolver(new string[] {"Content","FalseContent","EmptyContent" }, false) })),
            //参数相关操作
            param: {
                newMod: function () {
                    return { ParamName: "", ParamValue: "", ParamType: "1", ParamDesc: "", Param: "" };
                },
                add: function () {
                    var ref = this;
                    var model = ref.newMod();
                    ref.dt.push(model);
                },
                del: function (item) {
                    var ref = this;
                    for (var i = 0; i < ref.dt.length; i++) {
                        if (ref.dt[i] == item) { ref.dt.splice(i, 1);  }
                    }
                },
                //将参数字符串转换为json数组
                toDT: function (paramStr) {
                    var ref = this;
                    var paramArr = paramStr.split('|');
                    var list = [];
                    for (var i = 0; i < paramArr.length; i++) {
                        var model = ref.newMod();
                        model.ParamName = paramArr[i].split(',')[0];
                        model.ParamValue = paramArr[i].split(',')[1];
                        model.ParamType = paramArr[i].split(',')[2];
                        model.ParamDesc = paramArr[i].split(',')[3];
                        model.Param = paramArr[i].split(',')[4];
                        list.push(model);
                    }
                    return list;
                },
                //用于保存
                toStr: function () {
                    //mid,0,1,地图ID|width,480,1,地图宽度|Height,320,1,地图高度
                    //name,value,type,desc
                    var ref = this;
                    var paramStr = "";
                    if(!ref||!ref.dt||ref.dt.length<1){return "[]";}
                    for (var i = 0; i < ref.dt.length; i++) {
                        var model=ref.dt[i];
                        paramStr+=model.ParamName+","+model.ParamValue+","+model.ParamType+","+model.ParamDesc+"|";
                    }
                    if(paramStr.length>0){paramStr=paramStr.substr(0,paramStr.length-1);}
                    return paramStr;
                },
                dt: [],
            },
            fields1: [],
            fields2: []
        }
    });
</script>
<script>
    //LabelCall调用
    var diag = new ZL_Dialog();
    function opentitle(url, title) {
        diag.url = url;
        diag.title = title;
        diag.ShowModal();
    }
    function closeCuModal() {
        diagLabel.CloseModal();
    }
    //新增Div参数块,拥有绑定功能
    function pdrag(ev) {
        var code = $(ev.target ? ev.target : ev.srcElement).attr("code");
        ev.dataTransfer.setData("Text", code);
    }
    function VoteCheck() {
        var validator = $("#form1").validate({ meta: "validate" });
        return validator.form();
    }
    function changecate(obj) {
        var $text = $("#LabelCate_T");
        $text.val($(obj).val());
    }
    function saveEditor() {
        labelEditor.save();
        return true;
    }
    var base64 = Base64;
    //===================================
    
    // 标签编辑器代码
    var labelMDEditor = {
        instance: null,
        init: function (content) {
            let str = String(content);
            this.instance = editormd("editor", {
                theme: "default",
                mode: "text/html",
                value: str,
                wacth: false,
                toolbar: false,
                codeFold: true,
                width: "100%",
                height: 600,
                placeholder: "Enjoy coding!",
                path: '/Plugins/Markdown/lib/',
                onload: function () {
                    $("#editor .CodeMirror").css("width", "100%");
                },
                onresize: function () {
                    $("#editor .CodeMirror").css("width", "100%");
                }
            });
        }
    };
    function insertText(html){
        labelMDEditor.instance.insertValue(html);
    }
    function getValue(){
        console.log($("#editor textarea.editormd-markdown-textarea").val());
        return $("#editor textarea.editormd-markdown-textarea").val();
    }

    var labelEditor = {
        current: "Content_T",
        load: function (dom, id) {
            console.log($("#" + id).val());
            var ref = this;
            if (id == ref.current) {  }
            else { $("#" + ref.current).val(getValue()); }
            $(dom).closest(".nav-tabs").find("a").removeClass("active");
            $(dom).addClass("active");
            //---------------------
            ref.current = id;
            console.log(id);
            console.log($("#" + id).val());
            labelMDEditor.instance.setSelection({line:0, ch:0}, {line:100000, ch:10000});
            labelMDEditor.instance.replaceSelection($("#" + id).val() || "");
            labelMDEditor.instance.focus();
        },
        save: function () {
            var ref = this;
            $("#" + ref.current).val(getValue());
            $("#textContent").val($("#Content_T").val() + $("#EmptyContent").val() + $("#FalseContent").val());
        }
    };
</script>

}