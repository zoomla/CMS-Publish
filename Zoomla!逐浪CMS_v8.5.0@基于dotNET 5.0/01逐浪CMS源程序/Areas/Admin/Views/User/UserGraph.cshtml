@using Newtonsoft.Json.Linq;
@using Newtonsoft.Json;
@functions{
    public class M_GraphData
    {
        // 性别数据
        public int[] UserSexJson = new int[2];
        //年龄数据
        public int[] AgeSetJson = new int[6];
        //登录数据
        public int[] LoginRateJson = new int[5];
        //省份数据
        public int[] ProvinceSet = new int[32];
        //用户活跃度数据
        public int[] UserActivityJson = new int[5];
        //消费积分数据
        public int[] ConsumeExpJson = new int[6];
        //余额、银币、积分数据
        public int[] FundJson = new int[6], SliverCoinJson = new int[6], UserExpJson = new int[6];
        //登录时间数据
        public int[] UserRegTimeJson = new int[6];

        public List<string> ProvinceName = new List<string>();
    }
    B_User _buser = null;
    B_User buser { get { if (_buser == null) { _buser = new B_User(); }return _buser; } }
    M_GraphData dataMod = new M_GraphData();
    private void AnalyseData(DataRow dr)
    {
        int userId = Convert.ToInt32(dr["UserID"]);
        M_Uinfo baseUserInfo = buser.GetUserBaseByuserid(userId);
        M_UserInfo userInfo = buser.GetUserByUserID(userId);
        //统计年龄
        string birthday = baseUserInfo.BirthDay;
        SetAgeGroup(birthday);
        //统计性别
        //注意：数据库中按位储存性别信息，1为男，0为女
        bool userSex = baseUserInfo.UserSex;
        if (userSex) dataMod.UserSexJson[0]++;
        else dataMod.UserSexJson[1]++;
        //统计登录频率
        int freq = userInfo.LoginTimes;
        SetLoginRate(freq);
        //统计省份信息
        string provinc = baseUserInfo.Province;
        SetProvince(provinc);
        //统计活跃度
        DateTime lastLoginTimes = userInfo.LastLoginTimes;
        SetActivity(lastLoginTimes);
        //消费积分
        int consumeExp = userInfo.ConsumeExp;
        GenerialSetFunds(dataMod.ConsumeExpJson, consumeExp);
        //用户余额、银币、积分 
        double purse = userInfo.Purse;
        double sliverCoin = userInfo.SilverCoin;
        double userExp = userInfo.UserExp;
        SetUserFunds(purse, sliverCoin, userExp);
        //用户注册时间统计
        DateTime regTime = userInfo.RegTime;
        SetUserRegTime(regTime);
    }
    // 根据注册时间填充数据
    private void SetUserRegTime(DateTime regTime)
    {
        DateTime thisDay = DateTime.Now;

        TimeSpan last = new TimeSpan(regTime.Ticks);
        TimeSpan now = new TimeSpan(thisDay.Ticks);

        int days = now.Subtract(last).Duration().Days;

        if (days == 0) dataMod.UserRegTimeJson[0]++;
        if (days < 7) dataMod.UserRegTimeJson[1]++;
        if (days < 30) dataMod.UserRegTimeJson[2]++;
        if (days < 120) dataMod.UserRegTimeJson[3]++;
        if (days < 365) dataMod.UserRegTimeJson[4]++;
        dataMod.UserRegTimeJson[5]++;
    }
    // 判断用户的余额、银币、用户积分
    private void SetUserFunds(double purse, double sliverCoin, double userExp)
    {
        GenerialSetFunds(dataMod.FundJson, purse);
        GenerialSetFunds(dataMod.SliverCoinJson, sliverCoin);
        GenerialSetFunds(dataMod.UserExpJson, userExp);
    }
    // 对消费指数、余额、银币、积分的计算
    private void GenerialSetFunds(int[] dic, double value)
    {
        if (value < 100) dic[0]++;
        else if (value < 500) dic[1]++;
        else if (value < 1000) dic[2]++;
        else if (value < 5000) dic[3]++;
        else if (value < 10000) dic[4]++;
        else dic[5]++;
    }


    // 根据用户上次登录时间填充活跃度数据
    private void SetActivity(DateTime lastLoginTimes)
    {
        if (lastLoginTimes == null)
        {
            dataMod.UserActivityJson[4] += 1; return;
        }
        TimeSpan now = new TimeSpan(DateTime.Now.Ticks);
        TimeSpan last = new TimeSpan(lastLoginTimes.Ticks);

        int days = now.Subtract(last).Duration().Days;

        if (days < 3) dataMod.UserActivityJson[0] += 1;
        else if (days < 7) dataMod.UserActivityJson[1] += 1;
        else if (days < 30) dataMod.UserActivityJson[2] += 1;
        else if (days < 90) dataMod.UserActivityJson[3] += 1;
    }
    //填充省份信息
    private void SetProvince(string provinc)
    {
        int index = GetProvinceIndex(provinc);
        dataMod.ProvinceSet[index]++;
    }
    // 获取省份index
    private int GetProvinceIndex(string provinc)
    {
        if (string.IsNullOrEmpty(provinc)) return dataMod.ProvinceSet.Length - 1;
        if (dataMod.ProvinceName.Contains(provinc))
        {
            return dataMod.ProvinceName.IndexOf(provinc);
        }
        return dataMod.ProvinceName.Count - 1;
    }
    // 根据用户登录次数填充登录频率数据
    private void SetLoginRate(int freq)
    {
        if (freq > 500) dataMod.LoginRateJson[0]++;
        else if (freq > 250) dataMod.LoginRateJson[1]++;
        else if (freq > 100) dataMod.LoginRateJson[2]++;
        else if (freq > 50) dataMod.LoginRateJson[3]++;
        else dataMod.LoginRateJson[4]++;
    }
    // 获得用户年龄填充年龄数据
    private void SetAgeGroup(string birthday)
    {
        if (string.IsNullOrEmpty(birthday))
        {
            dataMod.AgeSetJson[5]++;
            return;
        }
        int age = DataConverter.CLng(birthday.Split('-')[0]);
        if (age < 1) { dataMod.AgeSetJson[5]++;return; }
        int thisYear = DateTime.Now.Year;
        age = thisYear - age;
        if (age > 50) dataMod.AgeSetJson[4]++;
        else if (age > 40) dataMod.AgeSetJson[3]++;
        else if (age > 30) dataMod.AgeSetJson[2]++;
        else if (age > 20) dataMod.AgeSetJson[1]++;
        else dataMod.AgeSetJson[0]++;
    }
        }
@{ 
    string json = SafeSC.ReadFileStr("/js/ICMS/area.js").Replace("var AreaMod=", "");
    JArray jarr = JsonConvert.DeserializeObject<JArray>(json);
    foreach (JObject jobj in jarr)
    {
        dataMod.ProvinceName.Add(jobj["Name"].ToString());
    }
    dataMod.ProvinceName.Add("未知省份");
    //throw new Exception(JsonConvert.SerializeObject(test));
    DataTable usersTable = buser.Sel();
    foreach (DataRow dr in usersTable.Rows)
    {
        AnalyseData(dr);
    }

}
@section head{<title>@L.用户画像</title> }
    @section content{
        @Call.SetBread(new Bread[] {
 new Bread("{admin}"),
 new Bread("UserManage",L.用户管理),
 new Bread(Context.Request.RawUrl(),L.用户画像)
})
	<div class="container-fluid pe-0">
    <div class="row">
  
            <div class="col-12 col-md-4">
                <div class="card Worktable_well">
                    <div class="card-header"><i class="zi zi_user"></i><span>@L.性别统计</span></div>
                    <div class="card-body WorktableHeight">
                        <div id="SexChart" class="zlchart"></div>
                    </div>
                </div>
            </div>

            <div class="col-12 col-md-4">
                <div class="card Worktable_well">
                    <div class="card-header"><i class="zi zi_file"></i><span>@L.年龄统计</span></div>
                    <div class="card-body WorktableHeight">
                        <div id="AgeChart" class="zlchart"></div>
                    </div>
                </div>
            </div>
            <div class="col-12 col-md-4">
                <div class="card Worktable_well">
                    <div class="card-header"><i class="zi zi_user"></i><span>@L.登录频率</span></div>
                    <div class="card-body WorktableHeight">
                        <div id="LoginChart" class="zlchart"></div>
                    </div>
                </div>
            </div>
            <div class="col-12 col-md-8">
                <div class="card Worktable_well">
                    <div class="card-header"><span>@L.用户地区分布</span></div>
                    <div class="card-body WorktableHeight">
                        <div id="ProvinceChart" class="zlchart"></div>
                    </div>
                </div>
            </div>
            <div class="col-12 col-md-4">
                <div class="card Worktable_well">
                    <div class="card-header"><i class="zi zi_user"></i><span>@L.活跃指数</span></div>
                    <div class="card-body WorktableHeight">
                        <div id="ActivityChart" class="zlchart"></div>
                    </div>
                </div>
            </div>
            <div class="col-12 col-md-4">
                <div class="card Worktable_well">
                    <div class="card-header"><i class="zi zi_user"></i><span>@L.消费指数</span></div>
                    <div class="card-body WorktableHeight">
                        <div id="ConsumeChart" class="zlchart"></div>
                    </div>
                </div>
            </div>

            <div class="col-12 col-md-4">
                <div class="card Worktable_well">
                    <div class="card-header">
                        <a href="javascript:;" id="purse" class="btn btn-primary" onclick="changeWealthPointsChartType('purse');">@L.余额</a>
                        <a href="javascript:;" id="silverCoin" class="btn btn-primary" onclick="changeWealthPointsChartType('silverCoin');">@L.银币</a>
                        <a href="javascript:;" id="userExp" class="btn btn-primary" onclick="changeWealthPointsChartType('userExp');">@L.积分</a>
                        <span class="badge float-end"></span>
                    </div>
                    <div class="card-body WorktableHeight purse" style="height: 261px">
                        <div id="WealthPointsChart" class="zlchart userFund"></div>
                    </div>
                </div>
            </div>

            <div class="col-12 col-md-4">
                <div class="card Worktable_well">
                    <div class="card-header">
                        <a href="javascript:;" class="btn btn-primary zl-day" onclick="changeRegTimeChartType('zl-day');">@L.日</a>
                        <a href="javascript:;" class="btn btn-primary zl-week" onclick="changeRegTimeChartType('zl-week');">@L.周</a>
                        <a href="javascript:;" class="btn btn-primary zl-month" onclick="changeRegTimeChartType('zl-month');">@L.月</a>
                        <a href="javascript:;" class="btn btn-primary zl-season" onclick="changeRegTimeChartType('zl-season');">@L.季</a>
                        <a href="javascript:;" class="btn btn-primary zl-year" onclick="changeRegTimeChartType('zl-year');">@L.年</a>
                        <a href="javascript:;" class="btn btn-primary zl-all" onclick="changeRegTimeChartType('zl-all');">@L.全部时间</a>
                        <span class="badge float-end"></span>
                    </div>
                    <div class="card-body WorktableHeight purse" style="height: 261px">
                        <div id="UserRegTimeChart" class="zlchart userFund"></div>
                    </div>
                </div>
            </div>

    </div>
	</div>
    <input type="hidden" ID="GraphData_Hid" value="@JsonConvert.SerializeObject(dataMod)" />
<script src="~/lib/ECharts/echarts.js"></script>
    <script>
        var json=JSON.parse($("#GraphData_Hid").val());
        var wealthPointsLocal = echarts.init(document.getElementById('WealthPointsChart'));
    var userRegTimeLocal = echarts.init(document.getElementById('UserRegTimeChart'));
    var fundGroup = ["@Html.Raw(L.一百以内)","@Html.Raw(L.大于)100","@Html.Raw(L.大于)500","@Html.Raw(L.大于)1K","@Html.Raw(L.大于)5K","@Html.Raw(L.大于)1W"];
        var fund = json.FundJson;
    var sliverCoin = json.SliverCoinJson;
    var userExp = json.UserExpJson;
    var wealthPointsOption = {
            title: {
                text: ''
            },
            tooltip: {},
            legend: {
                data:[]
            },
            xAxis: {
                data: []
            },
            yAxis: {},
            series: [{
                name: '@Html.Raw(L.人)',
                type: 'bar',
                data: [],
                itemStyle: {
                    normal:{
                        color: '#6E8B3D',
                        shadowBlur: 200,
                        shadowColor: 'rgba(0, 0, 0, 0.5)'
                    },
                    emphasis: {
                        shadowBlur: 10,
                        shadowOffsetX: 0,
                        shadowColor: 'rgba(0, 0, 0, 1.5)'
                    }
                }
            }]
        }; 
        wealthPointsOption.xAxis.data = [];  
        wealthPointsOption.xAxis.data = fundGroup;
        var currWeal = '';

    //用于财富指数图的切换数据
    function changeWealthPointsChartType(panel){ 
            $(currWeal).removeClass('btn-info');
            $('#'+panel).addClass('btn-info');
        currWeal = '#'+ panel;

        wealthPointsOption.series[0].data = [];
        var data ={};
        //var elem;
        if(panel == 'purse'){
            data = fund;
            wealthPointsOption.title.text='@Html.Raw(L.用户余额)';
            wealthPointsOption.title.subtext = '@Html.Raw(L.元)';
            wealthPointsOption.series[0].itemStyle.normal.color = '#6E8B3D';
            wealthPointsOption.series[0].data= [];
        } else if (panel=='silverCoin'){
            data =sliverCoin;
            wealthPointsOption.title.text = '@Html.Raw(L.银币)';
            wealthPointsOption.title.subtext='@Html.Raw(L.个)';
            wealthPointsOption.series[0].itemStyle.normal.color = '#548B54';
        } else if (panel == 'userExp'){
            data = userExp;
            wealthPointsOption.title.text='@Html.Raw(L.用户积分)';
            wealthPointsOption.title.subtext = '@Html.Raw(L.积分)';
            wealthPointsOption.series[0].itemStyle.normal.color = '#4876FF';
        }else {
            data = {};
        }
        wealthPointsOption.series[0].data = data;
        wealthPointsLocal.setOption(wealthPointsOption);
    }
    //用于处理用户注册人数的数据切换
    var userRegTimeGroup = ["@Html.Raw(L.当日)","@Html.Raw(L.一周内)","@Html.Raw(L.当月)","@Html.Raw(L.当季)","@Html.Raw(L.今年)","@Html.Raw(L.全部时间)"];
        //<%--var userRegTime = <%=UserRegTimeJson%>;--%>
        var userRegTime = json.UserRegTimeJson;
    var currRegDom = '';
    //用户注册时间配置项
    var userRegTimeOption = {
            title: {
                text: '',
                subtext: '@Html.Raw(L.人)'
            },
            tooltip: {},
            legend: {
                data:[]
            },
            xAxis: {
                data: []
            },
            yAxis: {},
            series: [{
                name: '@Html.Raw(L.人)',
                type: 'bar',
                barWidth: '30%',
                data: [],
                itemStyle: {
                    normal:{
                        color: '#1C86EE',
                        shadowBlur: 200,
                        shadowColor: 'rgba(0, 0, 0, 0.5)'
                    },
                    emphasis: {
                        shadowBlur: 10,
                        shadowOffsetX: 0,
                        shadowColor: 'rgba(0, 0, 0, 1.5)'
                    }
                }
            }]
        };  
        function changeRegTimeChartType(panel){
            $(currRegDom).removeClass('btn-info');
            $('.'+panel).addClass('btn-info');
        currRegDom = '.'+ panel;

        var data = [];
        var index = 0;
        userRegTimeOption.xAxis.data= [];
        userRegTimeOption.series[0].data= [];

        if(panel == 'zl-day') {
            userRegTimeOption.title.text='@Html.Raw(L.当日注册量)';
            index = 0;
        }else if(panel =='zl-week'){
            userRegTimeOption.title.text='@Html.Raw(L.本周注册量)';
            index = 1;
        }else if(panel =='zl-month'){
            userRegTimeOption.title.text='@Html.Raw(L.当月注册量)';
            index = 2;
        }else if(panel =='zl-season'){
            userRegTimeOption.title.text='@Html.Raw(L.本季度注册量)';
            index = 3;
        }else if(panel =='zl-year'){
            userRegTimeOption.title.text='@Html.Raw(L.今年注册量)';
            index = 4;
        }else{
            userRegTimeOption.title.text='@Html.Raw(L.总注册量)';
            index = 5;
        }
        userRegTimeOption.xAxis.data.push(userRegTimeGroup[index]);
        userRegTimeOption.series[0].data.push({ value: userRegTime[index], name: userRegTimeGroup[index] });
        userRegTimeLocal.setOption(userRegTimeOption);
    }
    </script>
    <script>
    </script>
    <script> 
        var sexChartLocal = echarts.init(document.getElementById('SexChart'));
    var ageChartLocal = echarts.init(document.getElementById('AgeChart'));
    var loginChartLocal = echarts.init(document.getElementById('LoginChart'));
    var provinceChartLocal = echarts.init(document.getElementById('ProvinceChart'));
    var activityChartLocal = echarts.init(document.getElementById('ActivityChart'));
    var consumeChartLocal = echarts.init(document.getElementById('ConsumeChart'));

    // 配置项
    //性别配置型
    var sexChartOption = {
            title : {
                text: '@Html.Raw(L.性别统计)',
                subtext: '',
                x:'center'
            },
            tooltip : {
                trigger: 'item',
                formatter: "{a} <br/>{b} : {c} ({d}%)"
            },
            legend: {
                orient: 'vertical',
                left: 'left',
                data: ['@Html.Raw(L.男)','@Html.Raw(L.女)','@Html.Raw(L.未知)']
            },
            series : [
                {
                    name: '@Html.Raw(L.性别)',
                    type: 'pie',
                    radius : '55%',
                    center: ['50%', '60%'],
                    data:[ ],
                    itemStyle: {
                        emphasis: {
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowColor: 'rgba(0, 0, 0, 0.5)'
                        }
                    }
                }
            ]
        }; 
        //年龄配置项
        var ageChartOption = {
            title: {
                text: '@Html.Raw(L.年龄统计)'
            },
            tooltip: {},
            legend: {
                data:['@Html.Raw(L.年龄)']
            },
            xAxis: {
                data: []
            },
            yAxis: {},
            series: [{
                name: '@Html.Raw(L.人)',
                type: 'bar',
                data: [],
                itemStyle: {
                    emphasis: {
                        shadowBlur: 10,
                        shadowOffsetX: 0,
                        shadowColor: 'rgba(0, 0, 0, 1.5)'
                    }
                }
            }]
        }; 
        //登录频率配置项
        var loginChartOption = {
            title : {
                text: '@Html.Raw(L.登录频率)',
                subtext: '',
                x:'center'
            },
            tooltip : {
                trigger: 'item',
                formatter: "{a} <br/>{b} : {c} ({d}%)"
            },
            legend: {
                orient: 'vertical',
                left: 'left',
                data: []
            },
            series : [
                {
                    name: '@Html.Raw(L.人数)',
                    type: 'pie',
                    radius : '55%',
                    center: ['50%', '60%'],
                    data:[
                    ],
                    itemStyle: {
                        emphasis: {
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowColor: 'rgba(0, 0, 0, 0.5)'
                        }
                    }
                }
            ]
        };
    
        //用户活跃度配置项
        var activityChartOption = {
            title : {
                text: '@Html.Raw(L.用户活跃指数)',
                subtext: '',
                x:'center'
            },
            tooltip : {
                trigger: 'item',
                formatter: "{a} <br/>{b} : {c} ({d}%)"
            },
            legend: {
                orient: 'vertical',
                left: 'left',
                data: []
            },
            series : [
                {
                    name: '@Html.Raw(L.活跃度)',
                    type: 'pie',
                    radius : '55%',
                    center: ['50%', '60%'],
                    data:[],
                    itemStyle: {
                        emphasis: {
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowColor: 'rgba(0, 0, 0, 0.5)'
                        }
                    }
                }
            ]   
        };
        //用户消费指数配置项
        var consumeChartOption = {
            title: {
                text: '@Html.Raw(L.消费指数)',
                subtext: '@Html.Raw(L.消费积分)'
            },
            tooltip: {},
            legend: {
                data:[]
            },
            xAxis: {
                data: []
            },
            yAxis: {},
            series: [{
                name: '人',
                type: 'bar',
                data: [],
                itemStyle: {
                    emphasis: {
                        shadowBlur: 10,
                        shadowOffsetX: 0,
                        shadowColor: 'rgba(0, 0, 0, 1.5)'
                    }
                }
            }]
        }; 

        // 填充数据 
        $(function () {
            //性别图
            sexChartOption.series[0].data = [];  
            sexChartOption.series[0].data.push({ value: json.UserSexJson[0], name: '@Html.Raw(L.男)' });
            sexChartOption.series[0].data.push({ value: json.UserSexJson[1], name: '@Html.Raw(L.女)' });
            //年龄图   
            //<%--var ageSet = <%=AgeSetJson%>;--%>
            var ageSet = json.AgeSetJson;
    var ageGroupSet = ["@Html.Raw(L.小于)20 @Html.Raw(L.岁)","20-30 @Html.Raw(L.岁)","30-40 @Html.Raw(L.岁)","40-50 @Html.Raw(L.岁)","@Html.Raw(L.大于)50 @Html.Raw(L.岁)","@Html.Raw(L.未知)"];
    ageChartOption.xAxis.data = ageGroupSet; 
            ageChartOption.series[0].data = [];  
            ageChartOption.series[0].data = ageSet;   
            //登录频率图
            var loginRateGroup = ["@Html.Raw(L.极高)","@Html.Raw(L.频繁)","@Html.Raw(L.活跃)","@Html.Raw(L.一般)","@Html.Raw(L.较少)"]; 
            //<%--var loginRateSet = <%=LoginRateJson%>; --%> 
            var loginRateSet = json.LoginRateJson;
    loginChartOption.series[0].data = [];
            loginChartOption.legend.data = []; 
            loginChartOption.legend.data = loginRateGroup;  
            for (var i = 0; i < loginRateGroup.length; i++) {
                loginChartOption.series[0].data.push({ value: loginRateSet[i], name: loginRateGroup[i] });
            }

            //用户地区分布图
             var provinceName = json.ProvinceName;
            //<%--var provinceSet = <%=ProvinceSet%>;--%>
            var provinceSet = json.ProvinceSet;
    var dataAxis =  provinceName;
    var data = [];
            for (var i = 0; i < provinceName.length; i++) {
                data.push(provinceSet[i]);
            }

            var yMax = 1000;
    var dataShadow = [];

            for (var i = 0; i < data.length; i++) {
                dataShadow.push(yMax);
            }

            provinceChartOption = {
                title: {
                    text: '@Html.Raw(L.用户地区分布)',
                    subtext: '@Html.Raw(L.点击)，@Html.Raw(L.滚轮或滑动缩放)'
                },
                xAxis: {
                    data: dataAxis,
                    axisLabel: {
                        inside: true,
                        textStyle: {
                            color: '#5C5C5C'
                        }
                    },
                    axisTick: {
                        show: false
                    },
                    axisLine: {
                        show: false
                    },
                    z: 10
                },
                yAxis: {
                    axisLine: {
                        show: false
                    },
                    axisTick: {
                        show: false
                    },
                    axisLabel: {
                        textStyle: {
                            color: '#999'
                        }
                    }
                },
                dataZoom: [
                    {
                        type: 'inside'
                    }
                ],
                series: [
                    { // For shadow
                        type: 'bar',
                        itemStyle: {
                            normal: {color: 'rgba(0,0,0,0.05)'}
                        },
                        barGap:'-100%',
                        barCategoryGap:'40%',
                        data: dataShadow,
                        animation: false
                    },
                    {
                        type: 'bar',
                        itemStyle: {
                            normal: {
                                color: new echarts.graphic.LinearGradient(
                                    0, 0, 0, 1,
                                    [
                                        {offset: 0, color: '#83bff6'},
                                        {offset: 0.5, color: '#188df0'},
                                        {offset: 1, color: '#188df0'}
                                    ]
                                )
                            },
                            emphasis: {
                                color: new echarts.graphic.LinearGradient(
                                    0, 0, 0, 1,
                                    [
                                        {offset: 0, color: '#2378f7'},
                                        {offset: 0.7, color: '#2378f7'},
                                        {offset: 1, color: '#83bff6'}
                                    ]
                                )
                            }
                        },
                        data: data
                    }
                ]
            }; 
            // Enable data zoom when user click bar.
            var zoomSize = 6;
    provinceChartLocal.on('click', function (params) {
        provinceChartLocal.dispatchAction({
        type: 'dataZoom',
                    startValue: dataAxis[Math.max(params.dataIndex - zoomSize / 1.2, 0)],
                    endValue: dataAxis[Math.min(params.dataIndex + zoomSize / 1.2, data.length - 1)]
                });
    });
             
            //用户活跃度图
            var userActivityGroup =  [ "@Html.Raw(L.最近三天)","@Html.Raw(L.最近一周)","@Html.Raw(L.最近一个月)","@Html.Raw(L.最近三个月)","@Html.Raw(L.非活跃用户)"]; 
            //<%--var userActivity = <%=UserActivityJson%>;--%>
            var userActivity = json.UserActivityJson;
    activityChartOption.legend.data = [];  
            activityChartOption.series[0].data = [];
            activityChartOption.legend.data =  userActivityGroup;  
            for (var i = 0; i < userActivityGroup.length; i++) {
                activityChartOption.series[0].data.push({ value: userActivity[i], name: userActivityGroup[i] });  
            }
            //用户消费指数
            var consumeExpGroup = [ "@Html.Raw(L.一百以内)","@Html.Raw(L.大于)100","@Html.Raw(L.大于)500","@Html.Raw(L.大于)1K","@Html.Raw(L.大于)5K","@Html.Raw(L.大于)1W"];
            //<%--var consumeExp = <%=ConsumeExpJson%>;--%>
            var consumeExp = json.ConsumeExpJson;
    consumeChartOption.xAxis.data = []; 
            consumeChartOption.series[0].data = [];   
            consumeChartOption.xAxis.data = consumeExpGroup;  
            consumeChartOption.series[0].data = consumeExp;    
             
            //设置参数
            sexChartLocal.setOption(sexChartOption);
            ageChartLocal.setOption(ageChartOption);
            loginChartLocal.setOption(loginChartOption);
            provinceChartLocal.setOption(provinceChartOption);
            activityChartLocal.setOption(activityChartOption);
            consumeChartLocal.setOption(consumeChartOption);
            changeWealthPointsChartType('purse');
    changeRegTimeChartType('zl-day');
        })
    </script>
 }
@section script{ }