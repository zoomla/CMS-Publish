@using ZoomLa.BLL.Other
@functions{
    B_GradeOption bll = new B_GradeOption();
    public string FValue { get { return Context.Request.GetParam("FValue"); } }
    public string FieldName { get { return Context.Request.GetParam("FieldName"); } }
    public int CateID { get { return DataConverter.CLng(Context.Request.GetParam("CateID")); } }

}
@{ 
    DataTable dt = bll.GetGradeList(CateID,-100);
    dt.Columns["GradeID"].ColumnName = "id";
    dt.Columns["GradeName"].ColumnName = "name";
    dt.Columns["ParentID"].ColumnName = "pid";
}
@{
    /*
     * 通用多级联动(不限定子级数量)
     * 
     * FValue是直接从dt中读,所以不能有同name的值
     */ 
}
@section head{}
@section content{
<div  id="app">
    <div style="display:flex;">
        <select class="form-control" style="max-width:200px;margin-right:5px;" v-for="(item,index) in choosed" @@change="change(item,index)" v-model="item.choosed"><option v-for="option in item.child" :value="option">{{ option.name }}</option></select>
    </div>
    <input type="text" v-model="getValue()"/>
</div>
}
@section script{
<script src="/res/vue/vue.min.js"></script>
<script>
    var app = new Vue({
        el: "#app",
        mounted: function () {
            var ref = this;
            var depth_max = 0;//深度
           //递归整理数据为json列表,id,name,pid三个为必要键
            function groupByPid(dt, pid, depth) {
                var result = []; depth++;
                for (var i = 0; i < dt.length; i++) {
                    if (dt[i].pid == pid) { result.push(dt[i]); dt[i].child = groupByPid(dt, dt[i].id, depth); }
                }
                if (depth > depth_max) { depth_max = depth; }
                return result;
            }
            ref.list = groupByPid(ref.dt, 0,depth_max);
            for (var i = 0; i < (depth_max-1); i++) {
                //存储指定的item对象
                if (i == 0) { ref.choosed.push({ "child": ref.list }); continue; }
                var pre = ref.choosed[i - 1];
                if (pre.child && pre.child.length > 0) { pre.choosed = pre.child[0]; ref.choosed.push(pre.child[0]); }
                else { ref.choosed.push({ "child": []}); }
            }
            //--------------如果指定了值,则赋值格式：(广东省,深圳,罗湖)
            var valueArr = "@Html.Raw(FValue)".split(',');
            if (valueArr.length > 0) {
                for (var i = 0; i < valueArr.length; i++) {
                    var item = ref.getByName(ref.dt, valueArr[i]);
                    //指定选中的值,与选中的值的下级元素
                    if (item) { ref.choosed[i].choosed = item;   if (i < (ref.choosed.length - 1)) {  ref.choosed[i + 1] = item;} }
                }
            }
        },
        data: {
            dt:@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(dt)),
            choosed:[]
        },
        methods: {
            change: function (item, index) {
                var ref = this;
                //到末尾,不需要再判断子级
                if (index >= (ref.choosed.length - 1)) { return;}
                Vue.set(ref.choosed, (index + 1), item.choosed);
                //清除后几级的选项
                for (var i = (index + 2); i < ref.choosed.length; i++) {
                    Vue.set(ref.choosed, i, { child: [] });
                }
            },
            getByName: function (list, name) {
                for (var i = 0; i < list.length; i++) {
                    if (list[i].name === name) { return list[i]; }
                }
                return null;
            },
            //组成需要保存的格式
            getValue: function () {
                var ref = this;
                var result = "";
                for (var i = 0; i < ref.choosed.length; i++) {
                    var choosed = ref.choosed[i].choosed;
                    if (choosed) { result += ref.choosed[i].choosed.name + ","; }
                    else { result += ","; }
                    
                }
                result = result.substr(0, result.length - 1);
                parent.document.getElementById("txt_@(FieldName)").value = result;
                return result;
            },
        }
    });    
</script>
}