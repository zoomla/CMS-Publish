@page
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Mvc
@using System.Collections.Generic;
@using System.Data;
@using System.Data.SqlClient;
@using ZoomLa.BLL;
@using ZoomLa.BLL.API;
@using ZoomLa.Common;
@using ZoomLa.Model;
@using ZoomLa.Safe;
@using ZoomLa.SQLDAL;
@using ZoomLa.SQLDAL.SQL;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using ZoomLa.AppCode.Verify;
@using ZoomLa.BLL.Helper
@using ZoomLa.Model.Other
@model PageModel
@functions{
    public class PageModel : Page_Base
    {
        public static Dictionary<string, string> Cache = new Dictionary<string, string>();
        public override int Mid { get { return DataConvert.CLng(GetParam("id")); } }
        B_Safe_Mobile mobileBll = new B_Safe_Mobile();
        M_APIResult ret = new M_APIResult(M_APIResult.Failed);
        public IActionResult OnGet()
        {
            return ActionDeal();
        }
        public IActionResult OnPost()
        {
            return ActionDeal();
        }
        //============================================================================================================
        private IActionResult ActionDeal()
        {
            string mobile = GetParam("mobile").Trim();
            try
            {
                switch (action.ToLower())
                {
                    case "mobilereg"://手机注册(用于单页面注册)
                        if (string.IsNullOrEmpty(mobile)) { ret.retmsg = "手机号码不能为空"; }
                        else if (buser.IsExist("ume", mobile)) { ret.retmsg = "该手机号已被注册"; }
                        else if (!RegexHelper.IsMobilPhone(mobile)) { ret.retmsg = "手机号码格式不正确"; }
                        else
                        {
                            string err = "";
                            if (SendCode(mobile, out err))
                            {
                                ret.retcode = M_APIResult.Success;
                            }
                            else { ret.retmsg = err; }
                        }
                        break;
                    case "sendvailmsg"://手机发送验证(用于手机流程注册)(Register_Mobile)
                        {
                            if (!VerifyHelper.Check(GetParam("hcode"))) { throw new Exception("验证码不正确"); }  //手机注册接口的验证码机制
                            //if (!ZoomlaSecurityCenter.VCodeCheck(context.GetParamuest["hcode"], context.GetParamuest["code"])) { context.Response.Write("验证码不正确"); return; }
                            //检测手机短信发送次数
                            if (mobileBll.CheckMobile(mobile, IPScaner.GetUserIP(HttpContext)))
                            {
                                string vaildnum = function.GetRandomString(6, 2);//验证码1是纯字母-2是数字-3是混合
                                string retMsg = SendWebSMS.SendMessage(mobile, "注册验证码是：" + vaildnum);
                                //添加一条发送手机短信记录
                                mobileBll.Insert(new M_Safe_Mobile() { Phone = mobile, IP = IPScaner.GetUserIP(HttpContext), VCode = vaildnum, Source = "register" });
                                ret.retcode = M_APIResult.Success;
                            }
                            else
                            {
                                ret.retmsg = "短信发送次数超过上限!";
                            }
                        }
                        break;
                    case "setmobile_1"://验证手机,通过后修改值
                        {
                            if (mu.IsNull) { ret.retmsg = "用户未登录"; }
                            else if (string.IsNullOrEmpty(mobile)) { ret.retmsg = "手机信息为空"; }
                            else if (!RegexHelper.IsMobilPhone(mobile)) { ret.retmsg = "手机格式不正确"; }
                            else
                            {
                                string err = "";
                                if (SendCode(mobile, out err)) { ret.retcode = M_APIResult.Success; }
                                else { ret.retmsg = err; }
                            }
                        }
                        break;
                    case "setmobile_2":
                        {
                            string code = GetParam("code");
                            string serverCode = Cache["mobile_code_" + mobile] as string;
                            if (mu.IsNull) { ret.retmsg = "用户未登录"; }
                            else if (string.IsNullOrEmpty(mobile)) { ret.retmsg = "手机号不能为空"; }
                            else if (!RegexHelper.IsMobilPhone(mobile)) { ret.retmsg = "手机格式不正确"; }
                            else if (string.IsNullOrEmpty(code)) { ret.retmsg = "校验码为空"; }
                            else if (serverCode == null || string.IsNullOrEmpty(serverCode)) { ret.retmsg = "无对应的校验码信息"; }
                            else if (!serverCode.Equals(code, StringComparison.CurrentCultureIgnoreCase)) { ret.retmsg = "校验码不匹配"; }
                            else
                            {
                                M_Uinfo basemu = buser.GetUserBaseByuserid(mu.UserID);
                                basemu.Mobile = mobile;
                                buser.UpdateBase(basemu);
                                ret.retcode = M_APIResult.Success;
                                Cache["mobile_code_" + mobile] = "";
                            }
                        }
                        break;
                    //case "valid"://提交手机号与验证码,根据这两个服务端校验(移changemp代码)
                    //    {
                    //        string code = GetParam("code");
                    //        string serverCode=context.Cache["mobile_code_" + mobile]as string;
                    //        if (string.IsNullOrEmpty(code)) { retMod.retmsg = "校验码为空"; }
                    //        else if (serverCode == null || string.IsNullOrEmpty(serverCode)) { retMod.retmsg = "无对应的校验码信息"; }
                    //        else if (!serverCode.Equals(code, StringComparison.CurrentCultureIgnoreCase)) { retMod.retmsg = "校验码不匹配"; }
                    //        else
                    //        {
                    //            context.Cache["mobile_code_" + mobile] = null;
                    //            retMod.retcode = M_APIResult.Success;
                    //        }
                    //    }
                    //    break;
                    default:
                        {
                            ret.retmsg = "[" + action + "]接口不存在";
                        }
                        break;
                }

            }
            catch (Exception ex)
            {
                ret.retcode = M_APIResult.Failed;
                ret.retmsg = ex.Message;
            }
            return Content(ret.ToString());
        }
        //如err不为空,则发送失败
        private bool SendCode(string mobile, out string err)
        {
            //
            err = "";
            //发送验证码
            if (mobileBll.CheckMobile(mobile, IPScaner.GetUserIP(HttpContext)))
            {
                string code = function.GetRandomString(6, 2);//验证码
                SendWebSMS.SendMessage(mobile, "你的注册验证码:" + code);
                //添加一条发送手机短信记录
                mobileBll.Insert(new M_Safe_Mobile() { Phone = mobile, IP = IPScaner.GetUserIP(HttpContext) });
                Cache["mobile_code_" + mobile] = code;
                return true;
            }
            else
            {
                err = "短信发送次数超过上限!";
                return false;
            }
        }
    }
}
@{
    Layout = null;
}