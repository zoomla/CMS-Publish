@page
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Mvc
@using System.Collections.Generic;
@using System.Data;
@using System.Data.SqlClient;
@using ZoomLa.BLL;
@using ZoomLa.BLL.API;
@using ZoomLa.BLL.Content;
@using ZoomLa.BLL.CreateJS;
@using ZoomLa.BLL.Helper;
@using ZoomLa.BLL.Other;
@using ZoomLa.BLL.Shop;
@using ZoomLa.BLL.User;
@using ZoomLa.Common;
@using ZoomLa.Components;
@using ZoomLa.Extend;
@using ZoomLa.Extend.WXAPP;
@using ZoomLa.Model;
@using ZoomLa.Model.Content;
@using ZoomLa.Model.Shop;
@using ZoomLa.Model.User;
@using ZoomLa.Safe;
@using ZoomLa.SQLDAL;
@using ZoomLa.SQLDAL.SQL;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using ZoomLa.AppCode.Verify;
@using System.Text.RegularExpressions;
@using System.IO;
@using ZoomLaCMS.AppCode.Verify;
@model PageModel
@functions{
    public class PageModel : Page_Base
    {
        B_Payment payBll = new B_Payment();
        B_Favorite favBll = new B_Favorite();
        B_Node nodeBll = new B_Node();
        B_Cart cartBll = new B_Cart();
        B_CartPro cpBll = new B_CartPro();
        B_OrderList orderBll = new B_OrderList();
        B_Product proBll = new B_Product();
        B_Content conBll = new B_Content();
        B_Cash cashBll = new B_Cash();
        B_User_Bank bankBll = new B_User_Bank();
        B_Message msgBll = new B_Message();
        B_CodeModel ubBll = new B_CodeModel("ZL_UserBase");
        B_LiteUser liteBll = new B_LiteUser();
        B_Pub pubBll = new B_Pub();
        //------------------------
        public string platName = "ZoomlaCMS";
        public string siteUrl = SiteConfig.SiteInfo.SiteUrl + "/";
        public int PubID { get { return DataConvert.CLng(Req("pubid")); } }
        M_LiteUser litemu = new M_LiteUser();
        M_APIResult retMod = new M_APIResult(M_APIResult.Failed);
        public M_UserInfo _mu = null;
        public new M_UserInfo mu
        {
            get
            {
                if (litemu == null || litemu.userId < 1) { return new M_UserInfo(); }
                else if (_mu == null || _mu.UserID == 0) { _mu = buser.SelReturnModel(litemu.userId); }
                return _mu;
            }
        }
        private WXAPPAPI _api = null;
        private WXAPPAPI api { get { if (_api == null) { _api = WXAPPAPI.Code_Get(AppId); } return _api; } }
        //------------------------------------------------------------
        #region 访问授权
        public string APIId { get { return GetParam("APIId"); } }
        public string APIKey { get { return GetParam("APIKey"); } }
        //第三方绑定的openid或CMS生成的用户openid
        public string OpenId { get { return GetParam("openid"); } }
        //微信小程序或公众号CMS中ID
        public int AppId { get { return DataConvert.CLng(Req("appId"), 1); } }
        #endregion
        //------------------------------------------------------------
        public IActionResult OnGet()
        {
            return ActionDeal();
        }
        public IActionResult OnPost()
        {
            return ActionDeal();
        }

        //============================================================================================================
        private IActionResult ActionDeal()
        {
            try
            {
                if (SiteConfig.SiteInfo.APIClose) { throw new Exception("close"); }
                if (string.IsNullOrEmpty(APIKey) || string.IsNullOrEmpty(APIId)) { throw new Exception("10001"); }
                if (!SiteConfig.SiteInfo.API_Key.Equals(APIKey) || !SiteConfig.SiteInfo.API_ID.Equals(APIId)) { throw new Exception("10002"); }
                //---------------------------------------
                litemu = liteBll.SelModelByOpenId(OpenId);
                M_Pub pubMod = pubBll.SelReturnModel(PubID);
                switch (action)
                {
                    /**
                    * @api {get} /action=app_update APP版本更新
                    * @apiName APP版本更新
                    * @apiGroup APP发布
                    *
                    * @apiParam {Number} versionCode     应用版本号
                    * @apiParam {Number} versionName     应用版名称
                    * @apiParam {String} versionInfo     APP名称
                    * @apiParam {String} downloadUrl     Apk下载地址
                    *
                    * @apiDescription   需要对应APK开发参数
                    */
                    #region app升级更新
                    case "app_update":
                        {
                            string client_version = DataConvert.CStr(GetParam("ver"));
                            string client_version_name = DataConvert.CStr(GetParam("versionName"));
                            int client_os = DataConvert.CLng(GetParam("type"));

                            string versionCode = "101",//版本号100
                                    versionName = "1.0.1", //版本名称1.0.0
                                        versionInfo = "工信一期APP",
                                        downloadUrl = "";
                            bool forceUpdate = true;
                            if (client_version != versionCode || client_version_name != versionName)
                            {
                                if (client_os == 1101)
                                {

                                    downloadUrl = "https://www.domain.com/down/release.apk";

                                }
                                else if (client_os == 1102)
                                {
                                    downloadUrl = "";
                                }
                            }

                            string rsss = JsonHelper.GetJson(new string[] { "versionCode", "versionName", "versionInfo", "forceUpdate", "downloadUrl" }, new string[] {
                                versionCode,versionName,versionInfo,DataConvert.CStr(forceUpdate),downloadUrl });


                            retMod.retcode = M_APIResult.Success;

                            retMod.result = rsss;
                        }
                        break;
                    #endregion
                    #region 项目
                    /**
                    * @api {get} /action=packet_index   将首页信息打包
                    * @apiName 将首页信息打包
                    * @apiGroup 内容读取
                    *
                    * @apiParam {Number} nid    节点ID
                    * @apiParam {Number} cpage  每页显示数
                    * @apiParam {Number} psize  页码数
                    *
                    */
                    case "packet_index"://获取首页信息 调用方法：API/WXAPP?action=packet_index
                        {
                            Packet_Index model = new Packet_Index();
                            DataTable swiperDT = WXAppData.Content_Get(new Com_Filter() { skey_match = "首页_滑动门" }, "ZL_C_APIXX");
                            if (swiperDT.Rows.Count > 0)
                            {
                                model.swiper = DataConvert.CStr(swiperDT.Rows[0]["images"]);
                            }
                            //首页资讯列表 list与prolist代表不同的方法字段 storeId代表FirstNodeID字段
                            model.list = WXAppData.Content_Get(new Com_Filter() { modelIds = "2", storeId = 1, mode = "haspic", isAudited = true });
                            model.prolist = WXAppData.Content_Get(new Com_Filter() { modelIds = "2", storeId = 2, mode = "haspic", isAudited = true });
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = JsonConvert.SerializeObject(model);
                        }
                        break;
                    /**
                    * @api {get} /action=ps_index   获取首页信息
                    * @apiName 获取首页信息
                    * @apiGroup 内容读取
                    *
                    * @apiParam {Number} pid    父节点ID
                    * @apiParam {Number} snid   swiper内容的GID
                    *
                    */
                    case "ps_index"://获取首页信息
                        {
                            PS_Index model = new PS_Index();
                            //获取父节点下的子节点
                            int pid = DataConvert.CLng(GetParam("pid"), -100);
                            model.nodelist = GetNodeList(pid);
                            model.nodelist.Columns.Add("commonlist", Type.GetType("System.String"));
                            int nindex = 0;
                            foreach (DataRow ndr in model.nodelist.Rows)
                            {
                                if (nindex > 5)
                                {  //仅调用前6个
                                    model.nodelist.Rows[nindex].Delete();
                                    nindex++;
                                    continue;
                                }
                                //获取子节点下的文章列表
                                PageSetting setting = GetCommonList(DataConvert.CLng(ndr["NodeID"]), 0, 5);//5为只筛选前五条
                                ndr["commonlist"] = JsonConvert.SerializeObject(setting.dt);
                                nindex++;
                            }
                            model.nodelist.AcceptChanges();

                            //获取滑动门 3号节点下的文章列表
                            int snid = DataConvert.CLng(GetParam("snid"));
                            PageSetting swipersetting = GetCommonList(snid);
                            model.homeswiper = swipersetting.dt;

                            //工具节点下的文章
                            int tnid = DataConvert.CLng(GetParam("tnid"));
                            PageSetting toolsetting = GetCommonList(tnid);
                            model.toollist = toolsetting.dt;

                            //获取一个指定父节点下的子节点
                            int ppid = DataConvert.CLng(GetParam("ppid"));
                            model.parentlist = GetNodeList(ppid);

                            //获取一个指定父节点下的子节点
                            int ppid2 = DataConvert.CLng(GetParam("ppid2"));
                            model.parentlist2 = GetNodeList(ppid2);

                            //获取指定节点Pics
                            int newnid = DataConvert.CLng(GetParam("newnid"));
                            PageSetting newnsetting = GetCommonList(newnid);
                            model.newsNode = newnsetting.dt;

                            //获取指定模型Pics
                            int newmid = DataConvert.CLng(GetParam("newmid"));
                            PageSetting newmsetting = GetCommonList(0, 0, 20, 0, newmid);
                            model.newsMode = newmsetting.dt;

                            retMod.retcode = M_APIResult.Success;
                            retMod.result = JsonConvert.SerializeObject(model);
                        }
                        break;
                    /**
                    * @api {get} /action=swiper_list   读取指定节点下带pic缩图字段的ZL_C_Article内容模型推荐信息，从而传递给诸如swiper等滑动门控件调用
                    * @apiName 读取指定节点下带pic缩图字段的ZL_C_Article内容模型推荐信息，从而传递给诸如swiper等滑动门控件调用
                    * @apiGroup 内容读取
                    *
                    * @apiDescription   接口中100数字应改为你选中的目标节点ID
                    *
                    */
                    case "swiper_list":
                        {
                            int nid = DataConvert.CLng(Req("nid"));
                            int cpage = DataConvert.CLng(Req("cpage"), 1);
                            int psize = DataConvert.CLng(Req("psize"), 10);
                            PageSetting setting = new PageSetting() { cpage = cpage, psize = psize };
                            setting.t1 = "ZL_CommonModel";
                            setting.t2 = "ZL_C_Article";
                            setting.fields = "A.Title,A.GeneralID,B.pic,A.CreateTime,A.Inputer,B.Synopsis";
                            setting.where = "A.EliteLevel=1 AND A.Status=99 AND NodeID IN (100)";//42
                            setting.order = "CreateTime DESC";
                            setting.on = "A.ItemID=B.ID";

                            DBCenter.SelPage(setting);
                            for (int i = 0; i < setting.dt.Rows.Count; i++)
                            {
                                DataRow dr = setting.dt.Rows[i];
                                dr["pic"] = WXAppData.H_ImageUrl(DataConvert.CStr(dr["pic"]));
                            }
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = JsonConvert.SerializeObject(setting.dt);
                            //retMod.page = new M_API_Page(setting);
                        }
                        break;
                    /**
                    * @api {get} /action=shop_packet_index  获取商城首页信息
                    * @apiName 获取商城首页信息
                    * @apiGroup 商城应用
                    *
                    */
                    case "shop_packet_index":
                        {
                            Packet_Index model = new Packet_Index();
                            //修改为读取images字段
                            DataTable swiperDT = WXAppData.Content_Get(new Com_Filter() { skey_match = "商城_首页_滑动门" }, "ZL_C_APIXX");
                            if (swiperDT.Rows.Count > 0)
                            {
                                model.swiper = DataConvert.CStr(swiperDT.Rows[0]["images"]);
                            }
                            model.prolist = WXAppData.Product_Sel(1, 6, new Com_Filter() { });

                            retMod.retcode = M_APIResult.Success;
                            retMod.result = JsonConvert.SerializeObject(model);
                        }
                        break;
                    case "content_packet"://暂无内容
                        {

                        }
                        break;
                    /**
                    * @api {get} /action=ex_day_get  每日一帖
                    * @apiName 每日一帖
                    * @apiGroup 内容读取
                    *
                    */
                    case "ex_day_get":
                        {
                            DataTable dt = new DataTable();
                            string[] titles = new string[] { DateTime.Now.ToString("yyyyMMdd"), DateTime.Now.ToString("MMdd"), "默认" };
                            foreach (string title in titles)
                            {
                                int gid = DataConvert.CLng(DBCenter.ExecuteScala("ZL_CommonModel", "GeneralID", "NodeID=63 AND Title='" + title + "'"));
                                if (gid > 0)
                                {
                                    dt = WXAppData.Content_Get(gid);
                                    break;
                                }
                            }
                            dt.Columns.Add("year", typeof(string));
                            dt.Columns.Add("monthday", typeof(string));
                            dt.Columns.Add("week", typeof(string));
                            dt.Rows[0]["year"] = DateTime.Now.ToString("yyyy");
                            dt.Rows[0]["monthday"] = DateTime.Now.ToString("MM|dd");
                            dt.Rows[0]["week"] = GetWeekStr(DateTime.Now);
                            retMod.result = JsonConvert.SerializeObject(dt);
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    #endregion
                    /**
                    * @api {get} /action=comment_list_p  内容评论接口
                    * @apiName 内容评论接口
                    * @apiGroup 内容读取
                    *
                    * @apiParam {Number} id   内容gid
                    * @apiParam {Number} type 评论类型，`1 `为内容评论

                    *
                    */
                    #region 内容评论接口
                    case "comment_list_p": //获取评论（2020新版） 调用方法：API/WXAPP?action=comment_list_p&id=[可选评论ID]
                        {
                            string id = Req("id");
                            string type = Req("type");
                            string where = "";
                            if (!string.IsNullOrEmpty(id))
                            {
                                where = " CommentID= " + id;
                            }
                            else
                            {
                                where = " type = " + type;
                            }
                            DataTable dt = DBCenter.Sel("ZL_Comment", where);
                            retMod.result = JsonConvert.SerializeObject(dt);
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    /**
                    * @api {post} /action=comment_push  添加评论（Json方法）
                    * @apiName 添加评论（Json方法）
                    * @apiGroup 内容读取
                    *
                    */
                    case "comment_push": //添加评论（Json方法） 调用方法 ：API/WXAPP?action=comment_push&model=-|"GeneralID":"169","Title":"","Contents":"dsfsd","Audited":1|-
                        {
                            M_Comment cmtMod = JsonConvert.DeserializeObject<M_Comment>(Req("model"));
                            string id = Req("id");
                            if (string.IsNullOrEmpty(id))
                            {
                                id = "0";
                                DBCenter.Insert(cmtMod);
                            }
                            DBCenter.UpdateByID_new(cmtMod, Convert.ToInt32(id));
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    /**
                    * @api {get} /action=comment_list  获取指定文章（GID）下所有评论
                    * @apiName 获取指定文章（GID）下所有评论
                    * @apiGroup 内容读取
                    *
                    * @apiParam {Number} id 文章的Gid
                    *
                    */
                    case "comment_list": //获取指定文章（GID）下所有评论 调用方法：API/WXAPP?action=comment_list&id=[文章GID]
                        {
                            B_Comment cmtBll = new B_Comment();
                            PageSetting setting = cmtBll.SelPage(CPage, PSize, new Com_Filter()
                            {
                                gids = Mid.ToString(),
                                status = "99"
                            });
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = JsonConvert.SerializeObject(setting.dt);
                            retMod.page = new M_API_Page(setting);
                        }
                        break;
                    /**
                    * @api {post} /action=comment_add  添加评论
                    * @apiName 添加评论
                    * @apiGroup 内容读取
                    *
                    * @apiParam {Number} uid 用户ID，即评论人ID
                    * @apiParam {String} content 评论内容
                    *
                    */
                    case "comment_add": //添加评论 调用方法：API/WXAPP?action=comment_add&uid=[用户ID]&gid=[内容ID]&content=[评论内容]
                        {
                            int uid = DataConvert.CLng(Req("uid"));  //支持APP传参的方法
                            litemu = liteBll.SelReturnModel(uid);    //支持APP传参的方法
                            B_Comment cmtBll = new B_Comment();
                            //M_Comment model = JsonConvert.DeserializeObject<M_Comment>(GetParam("model"));
                            M_Comment model = new M_Comment();
                            model.GeneralID = DataConvert.CLng(GetParam("gid"));
                            //model.Title = GetParam("title");
                            model.Contents = GetParam("content");
                            model.UserID = litemu.userId;
                            model.Title = litemu.honeyName;
                            model.Audited = true;
                            model.Pid = 0;
                            model.Status = 99;
                            int id = cmtBll.Insert(model);
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = id.ToString();
                        }
                        break;
                    #endregion
                    #region 节点
                    /**
                    * @api {get} /action=node_list  节点列表
                    * @apiName 节点列表
                    * @apiGroup 内容读取
                    *
                    * @apiParam {Number} pid 父节点ID，为空则输出所有节点。
                    * @apiParam {Number} ids 节点ID，用于输出指定节点，可为空。
                    *
                    */
                    case "node_list":
                        {
                            string ntype = Req("ntype");
                            int pid = DataConvert.CLng(GetParam("pid"), -100);
                            string where = "1=1 ";
                            if (pid != -100) { where += " AND ParentID=" + pid; }
                            if (!string.IsNullOrEmpty(ids)) { SafeSC.CheckIDSEx(ids); where += " AND NodeID IN (" + ids + ")"; }
                            DataTable dt = DBCenter.Sel("ZL_Node", where, "OrderID ASC,NodeID ASC");
                            retMod.result = JsonConvert.SerializeObject(dt);
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    /**
                    * @api {get} /action=node_get  读取指定节点信息
                    * @apiName 读取指定节点信息
                    * @apiGroup 内容读取
                    *
                    * @apiParam {Number} id 节点ID。
                    *
                    */
                    case "node_get":
                        {
                            M_Node nodeMod = nodeBll.SelReturnModel(Mid);
                            retMod.result = JsonConvert.SerializeObject(nodeMod);
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    /**
                    * @api {get} /action=model_list  读取模型列表
                    * @apiName 读取模型列表
                    * @apiGroup 内容读取
                    *
                    */
                    case "model_list":
                        {
                            PageSetting setting = PageSetting.Single(CPage, PSize, "ZL_Model", "ModelID", "ModelType=" + (int)M_ModelInfo.ModelTypeEnum.内容模型);
                            DBCenter.SelPage(setting);
                            retMod.result = JsonConvert.SerializeObject(setting.dt);
                            retMod.page = new M_API_Page(setting);
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    /**
                    * @api {get} /action=model_get  读取指定模型列表
                    * @apiName 读取指定模型列表
                    * @apiGroup 内容读取
                    *
                    * @apiParam {Number} id 模型ID。
                    *
                    */
                    case "model_get":
                        {
                            M_ModelInfo model = new B_Model().SelReturnModel(Mid);
                            retMod.result = JsonConvert.SerializeObject(model);
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    #endregion
                    /**
                    * @api {get} /action=content_list 指定节点下内容列表
                    * @apiName  指定节点下内容列表
                    * @apiGroup 内容读取
                    *
                    * @apiParam {Number} pnid 父节点ID
                    * @apiParam {Number} nid 当前节点ID
                    * @apiParam {Number} nids 指定节点ID，格式：请参照格式1,2,3
                    * @apiParam {Number} elite 是否推荐，0所有信息|1推荐信息
                    * @apiParam {Number} modelId 内容模型Id. 
                    *                   
                    * @apiDescription   读取节点必须已绑定模型
                    */
                    #region 内容
                    case "content_list":
                        {
                            //支持pic:单图,pics:多图(三图预览)
                            //专用修改,只允许上传一个节点ID,节点取第一个绑定的模型
                            int elite = DataConvert.CLng(Req("elite"));//是否只抽推荐内容
                            int modelId = DataConvert.CLng(GetParam("modelId"));
                            int pnid = DataConvert.CLng(GetParam("pnid"));//取哪个父节点下内容,与nid互斥
                            int nid = DataConvert.CLng(GetParam("nid"));//要取哪个节点的数据
                            string nids = GetParam("nids");
                            if (pnid > 0)
                            {
                                DataTable nodeDT = nodeBll.SelByPid(pnid, true);
                                nids = StrHelper.GetIDSFromDT(nodeDT, "NodeID");
                            }
                            //----------------------
                            if (modelId < 1)
                            {
                                object modelIds = null;
                                if (nid > 0)
                                {
                                    modelIds = DBCenter.ExecuteScala("ZL_Node", "ContentModel", "NodeID=" + nid);
                                }
                                else if (pnid > 0)
                                {
                                    modelIds = DBCenter.ExecuteScala("ZL_Node", "ContentModel", "NodeID=" + pnid);
                                }
                                else if (!string.IsNullOrEmpty(nids))
                                {
                                    int nodeId = DataConvert.CLng(nids.Split(',')[0]);
                                    modelIds = DBCenter.ExecuteScala("ZL_Node", "ContentModel", "NodeID=" + nodeId);
                                }
                                modelId = DataConvert.CLng(DataConvert.CStr(modelIds).Split(',')[0]);
                            }
                            PageSetting setting = new PageSetting() { cpage = CPage, psize = PSize };
                            setting.pk = "GeneralID";
                            setting.t1 = "ZL_CommonModel";
                            setting.on = "A.ItemID=B.ID";
                            setting.fields = "A.GeneralID,A.Title,A.CreateTime,A.Inputer,A.TopImg";
                            setting.fields += ",B.*";//以B.pic为准
                            setting.where = "A.Status=99 ";
                            if (nid > 0) { setting.where += " AND A.NodeID=" + nid; }
                            if (modelId > 0) { setting.where += " AND A.ModelID=" + modelId; }
                            if (elite > 0) { setting.where += " AND A.EliteLevel=1 "; }
                            if (!string.IsNullOrEmpty(nids))
                            {
                                SafeSC.CheckIDSEx(nids);
                                setting.where += " AND NodeID IN (" + nids + ")";
                            }
                            if (!string.IsNullOrEmpty(ids))
                            {
                                SafeSC.CheckDataEx(ids);
                                setting.where += " AND A.GeneralID IN (" + ids + ")";
                            }
                            setting.order = "A.OrderID DESC,A.GeneralID DESC";
                            setting.t2 = DataConvert.CStr(DBCenter.ExecuteScala("ZL_Model", "TableName", "ModelID=" + modelId));

                            DBCenter.SelPage(setting);
                            //------------修改缩略图路径(统一使用Pic字段)

                            for (int i = 0; i < setting.dt.Rows.Count; i++)
                            {
                                DataRow dr = setting.dt.Rows[i];
                                dr["TopImg"] = WXAppData.H_ImageUrl(DataConvert.CStr(dr["TopImg"]));
                                if (setting.dt.Columns.Contains("pic")) { dr["pic"] = WXAppData.H_ImageUrl(DataConvert.CStr(dr["pic"])); }
                            }

                            setting.dt.Columns.Remove("ID");
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = JsonConvert.SerializeObject(setting.dt);
                            retMod.page = new M_API_Page(setting);
                        }
                        break;
                    /**
                    * @api {post} /action=content_add 在指定节点发布内容
                    * @apiName  在指定节点发布内容
                    * @apiGroup 内容读取
                    *
                    * @apiParam {String} content    内容，JSON字符串格式，如：{"ModelID":2,"title":"标题内容","inputer":"admin","nodeId":100,"Status":"99",orderid:1,hits:222}
                    * @apiParam {String} addon    副表内容，JSON字符串格式，如：{"content":"文章内容"}
                    *
                    *                   
                    * @apiDescription   节点信息在content参数中通过nodeID传入，其它规则相同。
                    */
                    case "content_add"://添加内容 调用方法：API/WXAPP?action=content_add&content=-|"ModelID":2,"title":"标题内容","inputer":"admin","nodeId":100,"Status":0,orderid:1,hits:222|-&addon=-|"content":"副表内容在这里"|-
                                       //[status=99审核无效,必须web后台审核],或定时任务审核
                        {
                            //正文与附属内容
                            string content = Req("content");
                            string addon = Req("addon");
                            if (string.IsNullOrEmpty(content)) { throw new Exception("未指定内容"); }
                            if (string.IsNullOrEmpty(addon)) { throw new Exception("未指定附表内容"); }

                            M_CommonData conMod = JsonConvert.DeserializeObject<M_CommonData>(content);
                            string tbname = DataConvert.CStr(DBCenter.ExecuteScala("ZL_Model", "TableName", "ModelID=" + conMod.ModelID));
                            //conMod.Status = (int)ZLEnum.ConStatus.Recycle;  //启用此行则内容归入回收站
                            conMod.CreateTime = DateTime.Now;
                            conMod.UpDateTime = DateTime.Now;
                            conMod.TableName = tbname;
                            DataTable dt = JsonConvert.DeserializeObject<DataTable>("[" + addon + "]");
                            DataRow dr = dt.Rows[0];
                            //--------------------------
                            conMod.ItemID = DBCenter.Insert(tbname, BLLCommon.GetFields(dr), BLLCommon.GetParas(dr), BLLCommon.GetParameters(dr));
                            conMod.GeneralID = DBCenter.Insert(conMod);
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = conMod.GeneralID.ToString();
                        }
                        break;
                    /**
                    * @api {get} /action=content_get 单条内容详情
                    * @apiName 单条内容详情
                    * @apiGroup 内容读取
                    *
                    * @apiParam {Number} id 内容ID
                    *
                    */
                    case "content_get"://获取单条内容（用于显示内容详情） 调用方法：API/WXAPP?action=content_get&id=[id]
                        {
                            DataTable dt = WXAppData.Content_Get(Mid);
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = JsonConvert.SerializeObject(dt);
                            conBll.UpHits(Mid);
                        }
                        break;
                    #endregion
                    #region 商品
                    /**
                   * @api {get} /action=index_tops  按节点获取商品列表-不分状态详细字段
                   * @apiName 按节点获取商品列表-不分状态详细字段
                   * @apiGroup 商城应用
                   *
                   * @apiParam {Number} nid 节点ID，可为空。
                   *
                   * @apiDescription   4-定义调用商品数量，1为分页显示数
                   */
                    case "index_tops":
                        {
                            int nid = DataConvert.CLng(Req("nid"));
                            DataTable dt = WXAppData.Product_Sel(1, 4, new Com_Filter()
                            {
                                pid = nid
                            });
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = JsonConvert.SerializeObject(dt);
                        }
                        break;
                    /**
                   * @api {get} /action=product_list  指定店铺或系统商品列表-标题缩图价格简要字段
                   * @apiName 指定店铺或系统商品列表-标题缩图价格简要字段
                   * @apiGroup 商城应用
                   *
                   * @apiParam {Number} nid     节点ID，可为空。
                   * @apiParam {Number} storeId 店铺ID，为空时调用标准商品ID，否则调用店铺商品ID。
                   * @apiParam {Number} cpage   每页显示数，为空时调用所有。
                   * @apiParam {Number} psize   页码数，可为空。
                   *
                   * @apiDescription   调取条件为`select * from ZL_Commodities where ComModelID=0 and Sales=1`，其中`ComModelID`指定商品类型必须是商城标准商品，`sales`代表商品在销售中，20个商品分页。
                   */
                    case "product_list":
                        {
                            int nid = DataConvert.CLng(Req("nid"));
                            int storeId = DataConvert.CLng(Req("storeId"));

                            PageSetting setting = new PageSetting()
                            {
                                t1 = "ZL_Commodities",
                                fields = "ID,Proname,Proinfo,LinPrice,Thumbnails"
                            };
                            setting.cpage = CPage;
                            setting.psize = PSize;
                            if (nid > 1)//获取其和其下子节点的数据
                            {
                                setting.where = "NodeID IN (" + WXAppData.H_GetNodeIDS(nid) + ")";
                            }
                            else { setting.where = " 1=1 "; }
                            setting.where += " AND Sales=1 ";
                            if (storeId > 0)
                            {
                                setting.where += " AND UserShopID=" + storeId;
                            }
                            setting.order = "ID DESC";
                            DBCenter.SelPage(setting);
                            for (int i = 0; i < setting.dt.Rows.Count; i++)
                            {
                                setting.dt.Rows[i]["Thumbnails"] = WXAppData.H_ImageUrl(DataConvert.CStr(setting.dt.Rows[i]["Thumbnails"]));
                            }
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = JsonConvert.SerializeObject(setting.dt);
                            retMod.page = new M_API_Page(setting);
                        }
                        break;
                    /**
                   * @api {get} /action=product_get  指定ID商品详情信息
                   * @apiName 指定ID商品详情信息
                   * @apiGroup 商城应用
                   *
                   * @apiParam {Number} id 商品ID
                   *
                   */
                    case "product_get":
                        {
                            string fields = "A.ID,A.NodeID,A.ModelID,A.Proname,A.ProUnit,A.Procontent,A.Thumbnails,A.UserShopID";
                            fields += ",A.Stock,A.LinPrice,A.ShiPrice,A.AddUser,A.AddTime,A.AllClickNum,A.UserID,A.Addon";
                            fields += ",B.*";

                            DataTable dt = DBCenter.JoinQuery(fields, "ZL_Commodities", "ZL_P_Shop", "A.ItemID=B.ID", "A.ID=" + Mid, "", null, "A.ID");
                            if (dt.Rows.Count < 1) { throw new Exception("商品[" + Mid + "]不存在"); }
                            DataRow dr = dt.Rows[0];
                            dr["Procontent"] = DataConvert.CStr(dr["Procontent"]).Replace("/UploadFiles/", siteUrl + "/UploadFiles/");
                            dr["Thumbnails"] = WXAppData.H_ImageUrl(DataConvert.CStr(dr["Thumbnails"]));
                            if (DataConvert.CLng(dr["UserShopID"]) < 1)
                            {
                                dr["Addon"] = "自营商城";
                            }
                            else
                            {
                                dr["Addon"] = DataConvert.CStr(DBCenter.ExecuteScala("ZL_CommonModel", "Title", "GeneralID=" + dr["UserShopID"]));
                            }
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = JsonConvert.SerializeObject(dt);
                        }
                        break;
                    /**
                   * @api {get} /action=store_get  指定店铺信息
                   * @apiName 指定店铺信息
                   * @apiGroup 商城应用
                   *
                   * @apiParam {Number} id 店铺ID
                   *
                   */
                    case "store_get":
                        {
                            B_Store_Info stBll = new B_Store_Info();
                            M_Store_Info storeMod = stBll.SelReturnModel(Mid);
                            storeMod.InfoDR = null;
                            //storeMod.Hits++;
                            //DBCenter.UpdateSQL(storeMod.TbName, "Hits=" + storeMod.Hits, "GeneralID=" + storeMod.ID);
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = JsonConvert.SerializeObject(storeMod);
                        }
                        break;
                    #endregion
                    #region 互动
                    /**
                   * @api {post} /action=pub_add  添加互动
                   * @apiName 添加互动
                   * @apiGroup 互动留言
                   *
                   * @apiParam {Number} pubid 互动模型id
                   * @apiParam {String} model 提交信息，json格式，如：`{"pubtitle":"你的标题 ","自定义字段1":"lorem1,"自定义字段2":"lorem2"}`
                   *
                   */
                    case "pub_add":     //添加互动 调用方法：API/WXAPP?action=pub_add&pubid=7&model=-|"pubtitle":"你的标题 ","ww":"33232","cc":"111"|-
                        {
                            DataTable formDT = WXAppPub.GetFormDT(GetParam("model"));
                            //允许不登录提交
                            if (litemu == null) { litemu = new M_LiteUser(); }
                            DataRow dr = WXAppPub.FillForAdd(HttpContext, pubMod, formDT, litemu);
                            int id = DBCenter.Insert(pubMod.PubTableName, BLLCommon.GetFields(dr), BLLCommon.GetParas(dr), BLLCommon.GetParameters(dr));
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = id.ToString();
                        }
                        break;
                    /**
                   * @api {post} /action=pub_add  更新互动内容
                   * @apiName 更新互动内容
                   * @apiGroup 互动留言
                   *
                   * @apiParam {Number} pubid   互动模型id
                   * @apiParam {Number} openid  当前用户的openid,方法`select openid from ZL_EX_UserView`
                   * @apiParam {String} model   提交信息，json格式，如：`{"pubtitle":"你的标题 ","自定义字段1":"lorem1,"自定义字段2":"lorem2"}`
                   *
                   */
                    case "pub_update":
                        {
                            //需指定id,需PubUserID匹配
                            DataRow dr = WXAppPub.FilleForUpdate(Mid, pubMod, WXAppPub.GetFormDT(GetParam("model")));
                            if (litemu == null || DataConvert.CLng(dr["PubUserID"]) != litemu.userId) { throw new Exception("没有修改互动的权限"); }
                            WXAppPub.UpdateById(Mid, dr);
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    /**
                   * @api {get} /action=pub_get  指定互动模型pubid下互动信息列表
                   * @apiName 指定互动模型pubid下互动信息列表
                   * @apiGroup 互动留言
                   *
                   * @apiParam {Number} pubid 互动模型id
                   *
                   */
                    case "pub_get":
                        {
                            DataTable dt = DBCenter.Sel(pubMod.PubTableName);
                            retMod.result = JsonConvert.SerializeObject(dt);
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    /**
                   * @api {post} /action=pub_del  删除指定互动模型下提交的信息
                   * @apiName 删除指定互动模型下提交的信息
                   * @apiGroup 互动留言
                   *
                   * @apiParam {Number} pubid 互动模型id
                   * @apiParam {Number} id     该互动模型下的信息ID(源于用户提交)
                   *
                   */
                    case "pub_del":
                        {
                            if (pubMod == null || string.IsNullOrEmpty(pubMod.PubTableName)) { throw new Exception("互动信息错误"); }
                            DBCenter.DelByWhere(pubMod.PubTableName, "ID=" + Mid + " AND PubUserID=" + mu.UserID);
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    /**
                   * @api {get} /action=pub_list  获取指定的互动列表或单条数据
                   * @apiName 获取指定的互动列表或单条数据
                   * @apiGroup 互动留言
                   *
                   * @apiParam {Number} pubid 互动模型id
                   * @apiParam {Number} id     该互动模型下的信息ID(源于用户提交)，可为空。
                   *
                   */
                    case "pub_list"://获取指定的互动列表,或单条的数据 调用方法：列表：API/WXAPP?action=pub_list&pubid=[互动模型ID]，单条互动信息：API/WXAPP?action=pub_list&pubid=[互动模型ID]&id=[互动信息ID]
                        {
                            if (pubMod == null || string.IsNullOrEmpty(pubMod.PubTableName)) { throw new Exception("互动信息错误"); }
                            string where = "1=1 ";
                            where += " AND PubUserID=" + mu.UserID;
                            if (Mid > 0)
                            {
                                where += " AND ID=" + Mid;
                            }
                            PageSetting setting = new PageSetting()
                            {
                                cpage = CPage,
                                psize = PSize,
                                t1 = pubMod.PubTableName,
                                where = where,
                                order = "ID DESC"
                            };
                            DBCenter.SelPage(setting);
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = JsonConvert.SerializeObject(setting.dt);
                            retMod.page = new M_API_Page(setting);
                        }
                        break;
                    #endregion
                    #region 会员用户信息与积分处理
                    /**
                   * @api {get} /action=user_get    获取用户本身的最新信息
                   * @apiName 获取用户本身的最新信息
                   * @apiGroup 会员信息与积分处理
                   *
                   * @apiParam {Number} openid     当前用户的openid,方法`select openid from ZL_EX_UserView`
                   *
                   */
                    case "user_get":
                    case "user_getlast"://获取用户本身的最新信息
                        {
                            litemu = liteBll.SelReturnModel(litemu.userId);
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = JsonConvert.SerializeObject(litemu);
                        }
                        break;
                    /**
                   * @api {get} /action=user_list    用户列表信息
                   * @apiName 用户列表信息
                   * @apiGroup 会员信息与积分处理
                   *
                   * @apiParam {Number} gids     会员组(为空输出所有会员)
                   *
                   */
                    case "user_list"://获取会员列表 调用方法：API/WXAPP?action=user_list  按组获取：API/WXAPP?action=user_list&gids=[会员组]
                        {
                            //int storeId = DataConvert.CLng(Req("storeId"));
                            string gids = Req("gids");
                            /*if (storeId < 1) { throw new Exception("未指定教练信息"); }
                            DataTable dt = liteBll.Sel(new Com_Filter()
                            {
                                 storeId = storeId
                            });
                            */
                            string where = "";                  //默认where条件为空
                            if (!string.IsNullOrEmpty(gids))    //string不为空时的方法
                            {
                                where = "GroupID=" + gids;                //增加where
                            }
                            string order = " order by UserExp desc";  //增加Order开始
                            if (!string.IsNullOrEmpty(gids))
                            {
                                where = where + order;
                            }
                            else
                            {
                                where = "1=1" + order;
                            }                       //增加Order结束
                            DataTable dt = DBCenter.Sel("ZL_User", where);   //增加where支持
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = JsonConvert.SerializeObject(dt);
                        }
                        break;
                    /**
                   * @api {get} /action=user_info    获取会员信息（根据openid或者独有标识）
                   * @apiName 获取会员信息（根据openid或者独有标识）
                   * @apiGroup 会员信息与积分处理
                   *
                   * @apiParam {Number} uid     用户ID
                   *
                   */
                    case "user_info"://获取会员信息（根据openid或者独有标识） 调用方法：API/WXAPP?action=user_info&uid=[UserID]
                        {
                            //M_UserInfo cmtMod = JsonConvert.DeserializeObject<M_UserInfo>(Req("userexp"));  //如果想写积分，就在Req中写积分字段
                            //积分字段在json中命名：point
                            int uid = DataConvert.CLng(GetParam("uid"));
                            M_LiteUser model = liteBll.SelReturnModel(uid);
                            M_LiteUser pmu = new M_LiteUser()
                            {
                                userId = model.userId,
                                userName = model.userName,
                                honeyName = model.honeyName,
                                userFace = model.userFace,
                                point = model.point,
                                groupId = model.groupId,
                                Email = model.Email,
                                CompanyDescribe= model.CompanyDescribe,
                                seturl = model.seturl,
                                Position = model.Position,
                            };
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = JsonConvert.SerializeObject(pmu);
                        }
                        break;
                    /**
                   * @api {get} /action=user_score_setting    用户配置之每次签到奖励资金
                   * @apiName 用户配置之每次签到奖励资金
                   * @apiGroup 会员信息与积分处理
                   *
                   * @apiDescription   读取后台-会员-会员参数-积分设置中的`每次签到奖励`值。
                   */
                    case "user_score_setting": //用户配置之每次签到奖励资金 调用方法：API/WXAPP?action=user_score_setting
                        {
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = JsonConvert.SerializeObject(SiteConfig.UserConfig.SigninPurse);
                        }
                        break;
                    /**
                   * @api {get} /action=user_info_name    根据uid或uname获取会员信息
                   * @apiName 根据uid或uname获取会员信息
                   * @apiGroup 会员信息与积分处理
                   *
                   * @apiParam {Number} uid     用户ID
                   * @apiParam {Number} uname   用户名(可为空|当与uid并存时优先独占)
                   *
                   */
                    case "user_info_name"://获取会员信息（根据uid或uname） 调用方法：API/WXAPP?action=user_info_name&uid=[UserID]&uname=admin
                        {
                            int uid = DataConvert.CLng(GetParam("uid"));
                            string uname = Req("uname");
                            M_LiteUser model = liteBll.SelUid_Name(uid,uname);
                            M_LiteUser pmu = new M_LiteUser()
                            {
                                userId = model.userId,
                                userName = model.userName,
                                honeyName = model.honeyName,
                                userFace = model.userFace,
                                point = model.point,
                                groupId = model.groupId
                            };
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = JsonConvert.SerializeObject(pmu);
                        }
                        break;
                    /**
                   * @api {post} /action=user_exp_update    操作会员积分
                   * @apiName  操作会员积分
                   * @apiGroup 会员信息与积分处理
                   *
                   * @apiParam {Number} uid   用户ID
                   * @apiParam {Number} exp   要加的分值，如`10`分。
                   *
                   * @apiDescription 根据uid操作会员积分`zl_user.userexp`字段
                   *
                   */
                    case "user_exp_update": //操作会员积分zl_user.userexp字段（根据uid） 调用方法：API/WXAPP?action=user_exp_update&uid=[UserID]&exp=[要加的分值如33]
                        {
                            string uid = Req("uid");
                            int exp = DataConvert.CLng(Req("exp"));
                            DataTable dt = DBCenter.Sel("ZL_User", "UserID=" + uid);
                            for (int i = 0; i < dt.Rows.Count; i++)
                            {
                                exp = Convert.ToInt32(dt.Rows[i]["userexp"]) + exp;
                            }
                            DBCenter.UpdateSQL("ZL_User", "userexp=" + exp, "UserID=" + uid);
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = uid.ToString();
                        }
                        break;
                    /**
                   * @api {post} /action=user_exp_update_log    根据uid操作会员积分与金额时在ZL_UserExpHis表新增记录
                   * @apiName  根据uid操作会员积分与金额时在ZL_UserExpHis表新增记录
                   * @apiGroup 会员信息与积分处理
                   *
                   * @apiParam {String} model   写入信息json格式，如`{"UserID":1,"score":"56","score_before":"5","HisTime":"2020-11-02 16:11:30.613","Operator":1,"Detail":"管理员操作","OperatorIP":"","ScoreType":3,"Remark":"URL","Extend":"","Attach":"","Type1":"","Type2":"","Type3":""}`
                   *
                   * @apiDescription 根据uid操作会员积分金额时，对`ZL_UserExpHis`表记录新增方法，从而使会员拥有金额积分日志清单。
                   *
                   */
                    case "user_exp_update_log":  //根据uid操作会员积分金额时的ZL_UserExpHis表记录新增方法（金额积分日志）调用方法：API/WXAPP?action=user_exp_update_log&model=-|"UserID":15,"score":"56","score_before":"5","HisTime":"2020-11-02 16:11:30.613","Operator":1,"Detail":"管理员操作","OperatorIP":"","ScoreType":3,"Remark":"URL","Extend":"","Attach":"","Type1":"","Type2":"","Type3":""|-
                        {
                            M_UserExpHis uehMod = JsonConvert.DeserializeObject<M_UserExpHis>(Req("model"));
                            DBCenter.Insert(uehMod);
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    /**
                   * @api {get} /action=user_exp_list_log    根据uid检索会员余额明细列表
                   * @apiName  根据uid检索会员余额明细列表
                   * @apiGroup 会员信息与积分处理
                   *
                   * @apiParam {Number} uid   用户ID,可为空。
                   *
                   * @apiDescription 金额大于0为收入|金额小于0为支出
                   *
                   */
                    case "user_exp_list_log":  //根据uid检索会员余额明细列表，调用方法：API/WXAPP?action=user_exp_list_log&uid=[uid]
                        {
                            string uid = Req("uid");
                            string where = "";
                            if (!string.IsNullOrEmpty(uid))
                            {
                                where = "UserID =" + uid;
                            }
                            DataTable dt = DBCenter.Sel("ZL_UserExpHis", where, "Histime desc");
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = JsonConvert.SerializeObject(dt);
                        }
                        break;
                    /**
                   * @api {post} /action=user_login_openid    用户使用微信的openid登录-仅用于教练登录
                   * @apiName  用户使用微信的openid登录-仅用于教练登录
                   * @apiGroup 微信小程序应用
                   *
                   * @apiDescription 蓝天驾校小程序订制应用
                   *
                   */
                    case "user_login_openid":
                        {
                            string code = DataConvert.CStr(Req("code"));
                            string openid = GetOpenIdByCode(code, AppId);
                            if (string.IsNullOrEmpty(openid)) { throw new Exception("用户授权失效"); }
                            if (DBCenter.IsExist("ZL_User", "CompanyName='" + openid + "' AND GroupId>1"))
                            {
                                //已存在,直接返回
                                M_LiteUser liteMod = liteBll.SelModelByOpenId(openid);
                                retMod.retcode = M_APIResult.Success;
                                retMod.result = JsonConvert.SerializeObject(liteMod);
                            }
                            else
                            {
                                retMod.retmsg = "微信尚未关联用户";
                            }
                        }
                        break;
                    /**
                   * @api {post} /action=user_sync    根据openid用户自动注册或登录
                   * @apiName  根据openid用户自动注册或登录
                   * @apiGroup 微信小程序应用
                   *
                   */
                    case "user_sync":
                        {
                            //检测该微信用户是否已存在,新增或直接返回用户信息
                            string code = DataConvert.CStr(Req("code"));
                            string openid = GetOpenIdByCode(code, AppId);
                            if (string.IsNullOrEmpty(openid)) { throw new Exception("用户授权失效"); }
                            if (DBCenter.IsExist("ZL_User", "CompanyName='" + openid + "'"))
                            {
                                //已存在,直接返回
                                M_LiteUser liteMod = liteBll.SelModelByOpenId(openid);
                                retMod.retcode = M_APIResult.Success;
                                retMod.result = JsonConvert.SerializeObject(liteMod);
                            }
                            else
                            {
                                //不存在则新建用户再返回
                                string uname = "wechat" + DateTime.Now.ToString("yyyyMMdd") + function.GetRandomString(6);
                                M_UserInfo newmu = buser.NewUser(uname, function.GetRandomString(6), function.GetRandomEmail());
                                newmu.CompanyName = openid;//用于存储openid
                                newmu.UserFace = Req("userFace");
                                newmu.TrueName = newmu.HoneyName = Req("honeyName");
                                newmu.GroupID = SiteConfig.SiteOption.WX_UserGroupID;
                                newmu.ParentUserID = Req("puid");
                                newmu.UserID = buser.Add(newmu);
                                M_Uinfo basemu = new M_Uinfo();
                                basemu.UserId = newmu.UserID;
                                buser.AddBase(basemu);
                                //----------------------------同步创建推广用二维码
                                //try//[notes]
                                //{
                                //    //不需要可禁
                                //    //https://api.weixin.qq.com/wxa/getwxacode?access_token=
                                //    //https://api.weixin.qq.com/cgi-bin/wxaapp/createwxaqrcode?access_token=
                                //    WXAPPAPI.PostReturnImgBuffer("https://api.weixin.qq.com/cgi-bin/wxaapp/createwxaqrcode?access_token=" + api.AccessToken, "{\"path\":\"pages/apps/shop/index?puid=" + newmu.UserID + "\"}", "/UploadFiles/wxacode/", newmu.UserID + ".jpg");
                                //}
                                //catch (Exception ex) { ZLLog.L(ex.Message); }
                                //----------------------------推广人增加积分
                                //if (DataConvert.CLng(newmu.ParentUserID) > 0)//[remove]
                                //{
                                //    //推广一级得10积分，二级得8积分，三级得5积分，一起就三级
                                //    int puid = DataConvert.CLng(newmu.ParentUserID);
                                //    M_UserInfo pmu1 = new M_UserInfo(true), pmu2 = new M_UserInfo(true), pmu3 = new M_UserInfo(true);
                                //    pmu1 = buser.SelReturnModel(puid);
                                //    if (DataConvert.CLng(pmu1.ParentUserID) > 0) { pmu2 = buser.SelReturnModel(DataConvert.CLng(pmu1.ParentUserID)); }
                                //    if (DataConvert.CLng(pmu2.ParentUserID) > 0) { pmu3 = buser.SelReturnModel(DataConvert.CLng(pmu2.ParentUserID)); }
                                //    if (pmu1.UserID > 0) { buser.AddMoney(pmu1.UserID, 1, M_UserExpHis.SType.SIcon, "推广用户|一层|" + newmu.HoneyName); }
                                //    //if (pmu2.UserID > 0) { buser.AddMoney(pmu2.UserID, 8, M_UserExpHis.SType.Purse, "推广用户|二层|" + newmu.HoneyName); }
                                //    //if (pmu3.UserID > 0) { buser.AddMoney(pmu3.UserID, 5, M_UserExpHis.SType.Purse, "推广用户|三层|" + newmu.HoneyName); }
                                //}
                                //----------------------------
                                litemu = liteBll.SelReturnModel(newmu.UserID);
                                retMod.retcode = M_APIResult.Success;
                                retMod.result = JsonConvert.SerializeObject(litemu);
                            }

                        }
                        break;
                    /**
                   * @api {post} /action=user_code    根据code更新绑定openid
                   * @apiName  根据code更新绑定openid
                   * @apiGroup 微信小程序应用
                   *
                   * @apiParam {Number} uid   用户ID,可为空。
                   *
                   */
                    case "user_code":
                        {
                            int uid = DataConvert.CLng(Req("uid"));
                            string code = DataConvert.CStr(Req("code"));
                            if (uid < 1) { throw new Exception("未指定用户"); }
                            //-----------------
                            try
                            {
                                string openid = GetOpenIdByCode(code, AppId);
                                DBCenter.UpdateSQL("ZL_User", "CompanyName=@openid", "UserID=" + uid,
                                                            new List<SqlParameter>() { new SqlParameter("openid", openid) });
                                retMod.result = openid;
                                retMod.retcode = M_APIResult.Success;
                            }
                            catch (Exception ex) { retMod.retmsg = "Conver err:" + ex.Message; }
                        }
                        break;
                    /**
                   * @api {post} /action=user_register    用户注册
                   * @apiName  用户注册
                   * @apiGroup 会员信息与积分处理
                   *
                   * @apiParam {String} name   用户名
                   * @apiParam {String} passwd 用户密码
                   * @apiParam {String} email  用户注册邮箱E-mail
                   * @apiParam {Number} gid    所属会员组
                   *
                   */
                    case "user_register"://用户注册
                        {
                            string name = Req("name");
                            string passwd = Req("passwd");
                            string email = Req("email");
                            int gid = DataConvert.CLng(Req("gid"), 1);
                            if (string.IsNullOrEmpty(name)) { throw new Exception("用户名不能为空"); }
                            else if (string.IsNullOrEmpty(passwd)) { throw new Exception("密码不能为空"); }
                            else
                            {
                                M_UserInfo newmu = buser.NewUser(name, passwd, email);
                                newmu.CompanyName = "";//用于存储openid
                                newmu.UserFace = "/Images/userface/noface.png";
                                newmu.GroupID = gid;
                                newmu.ParentUserID = "1";//推荐人暂默认为admin
                                newmu.UserID = buser.Add(newmu);
                                M_Uinfo basemu = new M_Uinfo();
                                basemu.UserId = newmu.UserID;
                                buser.AddBase(basemu);
                                DBCenter.UpdateSQL(basemu.TbName, "xy_km='未分配'", "userId=" + newmu.UserID);
                                //----------------------------
                                litemu = liteBll.SelReturnModel(newmu.UserID);
                                retMod.retcode = M_APIResult.Success;
                                retMod.result = JsonConvert.SerializeObject(litemu);
                            }
                        }
                        break;
                    /**
                   * @api {post} /action=user_login_passwd    通过用户名与密码登录
                   * @apiName  通过用户名与密码登录
                   * @apiGroup 会员信息与积分处理
                   *
                   * @apiParam {String} name   用户名
                   * @apiParam {String} passwd 用户密码
                   *
                   */
                    case "user_login_passwd":
                        {
                            string name = Req("name");
                            string passwd = Req("passwd");
                            if (string.IsNullOrEmpty(name)) { retMod.retmsg = "用户名不能为空"; }
                            else if (string.IsNullOrEmpty(passwd)) { retMod.retmsg = "密码不能为空"; }
                            else
                            {
                                litemu = liteBll.SelModelByPasswd(name, passwd);
                                if (litemu == null) { retMod.retmsg = "用户名或密码错误"; }
                                else
                                {
                                    retMod.retcode = M_APIResult.Success;
                                    retMod.result = JsonConvert.SerializeObject(litemu);
                                }
                            }
                        }
                        break;
                    /**
                   * @api {post} /action=user_update_pwd    修改会员登录密码
                   * @apiName  修改会员登录密码
                   * @apiGroup 会员信息与积分处理
                   *
                   * @apiParam {Number} uid   用户id
                   * @apiParam {String} oldPass 原用户密码(md5加密值)
                   * @apiParam {String} newPass 新用户密码(md5加密值)
                   *
                   */
                    case "user_update_pwd":
                        {
                            int uid = DataConvert.CLng(GetParam("uid"));
                            M_UserInfo mu = buser.SelReturnModel(uid);
                            if (mu.IsNull) { throw new Exception("用户不存在"); }
                            string oldpwd = DataConvert.CStr(GetParam("oldPass"));
                            string newPass = DataConvert.CStr(GetParam("newPass"));
                            string reNewPass = DataConvert.CStr(GetParam("reNewPass"));
                            //string passwd = ZoomLa.Common.StringHelper.MD5(Req("passwd"));
                            if (!mu.UserPwd.Equals(oldpwd)) { throw new Exception("原密码不正确"); }
                            if (newPass != reNewPass) { throw new Exception("新密码两次输入不一致"); }
                            mu.UserPwd = newPass;
                            buser.UpdateByID(mu);
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = "1";
                        }
                        break;
                    /**
                   * @api {post} /action=user_update    更新用户信息
                   * @apiName  更新用户信息
                   * @apiGroup 会员信息与积分处理
                   *
                   * @apiParam {Number} uid   用户id
                   * @apiParam {String} mu     写入用户信息Json格式，如`{"siteId":0,"groupId":1,"userName":"15366668888","userFace":"https://a050.2018.z01.com/UploadFiles/System/wxapp/images/20201022/171710118176.png","TrueName":"我我我2","honeyName":"1530312","openid":"","puid":1,"address":"","sex":"女","cardType":"","idcard":"123123123","age":0,"mobile":"15366668888","purse":0,"sicon":0,"point":0,"msn":"AGKJHLWS4SWNR3CY4HHC","icq":"","sign":"","BirthDay":"2021-9-25","Position":"我你的","seturl":"http://111.com","CompanyDescribe":"ffff"}`
                   *
                   */
                    case "user_update":
                        {
                            /*
                             M_UserInfo mu = buser.SelReturnModel(litemu.userId);
                             M_Uinfo basemu = buser.GetUserBaseByuserid(litemu.userId);

                             //上面二行是小程序方法，litemu.userId  是由最上边 根据openid来获取的一个用户模型，如果要用APP开发应改为跟user_info接口一样：
                             int uid = DataConvert.CLng(GetParam("uid"));
                             M_UserInfo mu = buser.SelReturnModel(uid);
                             M_Uinfo basemu = buser.GetUserBaseByuserid(uid);
                             */
                            int uid = DataConvert.CLng(GetParam("uid"));
                            M_UserInfo mu = buser.SelReturnModel(uid);
                            M_Uinfo basemu = buser.GetUserBaseByuserid(uid);

                            if (mu.IsNull) { throw new Exception("用户不存在"); }
                            ////传递模型上来,进行修改,不需要修改的留为空值
                            M_LiteUser lite = JsonConvert.DeserializeObject<M_LiteUser>(Req("mu"));
                            //检测手机号或身份证号不可重复,允许为空
                            if (!string.IsNullOrEmpty(lite.mobile) && !lite.mobile.Equals(basemu.Mobile))
                            {
                                List<SqlParameter> sp = new List<SqlParameter>()
                        { new SqlParameter("mobile",lite.mobile)};
                                if (DBCenter.IsExist("ZL_UserBase", "mobile=@mobile", sp))
                                {
                                    throw new Exception("手机号已存在,请校验号码是否正确");
                                }
                            }
                            if (!string.IsNullOrEmpty(lite.idcard) && !lite.idcard.Equals(basemu.IDCard))
                            {
                                List<SqlParameter> sp = new List<SqlParameter>()
                        { new SqlParameter("idcard",lite.idcard)};
                                if (DBCenter.IsExist("ZL_UserBase", "idcard=@idcard", sp))
                                {
                                    throw new Exception("证件号已存在,请校验号码是否正确");
                                }
                            }
                            mu.HoneyName = lite.honeyName;
                            mu.UserFace = lite.userFace;
                            mu.CompanyDescribe = lite.CompanyDescribe;
                            mu.seturl = lite.seturl;
                            mu.Email = lite.Email;
                            mu.TrueName = lite.trueName;
                            buser.UpdateByID(mu);
                            basemu.Mobile = lite.mobile;
                            basemu.CardType = lite.cardType;
                            basemu.IDCard = lite.idcard;
                            basemu.UserSex = lite.sex == "男" ? false : true;
                            basemu.Address = lite.address;
                            basemu.Bugle = lite.age;
                            basemu.Position = lite.Position;
                            basemu.BirthDay = lite.birthday;  //20201026:增加此字段需要同步在M_LiteUser.cs中增加定义，并同步在ZL_EX_UserView视图增加字段
                            if (basemu.UserId == 0)
                            {
                                basemu.UserId = mu.UserID;
                                buser.AddBase(basemu);
                            }
                            else { buser.UpdateBase(basemu); }
                            //----------------
                            lite = liteBll.SelReturnModel(mu.UserID);
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = JsonConvert.SerializeObject(lite);
                        }
                        break;
                    /**
                   * @api {get} /action=user_tempcode_get    生成临时的一次性登录码
                   * @apiName  生成临时的一次性登录码
                   * @apiGroup 微信小程序应用
                   *
                   * @apiParam {Number} openid     当前用户的openid
                   */
                    case "user_tempcode_get"://生成临时的一次性登录码
                        {
                            B_CodeModel codeBll = new B_CodeModel("ZL_User_TempCode");
                            string result = function.GetRandomString(6, 2);
                            //仅保留一个码
                            DBCenter.DelByWhere(codeBll.TbName, "UserID=" + litemu.userId);
                            DataRow dr = codeBll.SelStruct().NewRow();
                            dr["TempCode"] = result;
                            dr["UserID"] = litemu.userId;
                            dr["UserName"] = litemu.userName;
                            dr["CDate"] = DateTime.Now;
                            dr["EDate"] = DateTime.Now.AddMinutes(10);
                            dr["ZStatus"] = 0;
                            dr["ZType"] = "";
                            codeBll.Insert(dr);
                            retMod.result = result;
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    /**
                   * @api {get} /action=user_star_is    获取用户是否已收藏
                   * @apiName  获取用户是否已收藏
                   * @apiGroup 会员信息与积分处理
                   *
                   * @apiParam {Number} openid     当前用户的openid
                   *
                   * @apiDescription 默认只用于内容
                   *
                   */
                    case "user_star_is":
                        {
                            int type = DataConvert.CLng(Req("type"), 1);
                            if (litemu.userId < 1) { throw new Exception("未指定用户"); }
                            if (Mid < 1) { throw new Exception("未指定内容"); }
                            string where = "owner=" + litemu.userId + " AND InfoID=" + Mid + " AND FavoriType=" + type;
                            bool result = DBCenter.IsExist("ZL_Favorite", where);
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = result ? "1" : "0";
                        }
                        break;
                    /**
                   * @api {post} /action=user_star_add    用户收藏功能
                   * @apiName  用户收藏功能
                   * @apiGroup 会员信息与积分处理
                   *
                   * @apiParam {Number} id      内容gid
                   * @apiParam {Number} type    内容类型，1为文章Item
                   * @apiParam {Number} openid  当前用户的openid
                   * @apiParam {String} title   收藏标题
                   * 
                   * @@apiDescription 用于操作`ZL_Favorite`表数据
                   */
                    case "user_star_add":
                        {
                            int type = DataConvert.CLng(Req("type"), 1);
                            if (litemu.userId < 1) { throw new Exception("未指定用户"); }
                            if (Mid < 1) { throw new Exception("未指定内容"); }
                            M_Favorite favMod = new M_Favorite();
                            favMod.Owner = litemu.userId;
                            favMod.InfoID = Mid;
                            favMod.Title = Req("title");
                            favMod.FavUrl = Req("url");
                            favMod.FavoriType = type;
                            favBll.AddFavorite(favMod);
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    case "user_star_del":
                        {
                            int type = DataConvert.CLng(Req("type"), 1);
                            if (litemu.userId < 1) { throw new Exception("未指定用户"); }
                            if (Mid < 1) { throw new Exception("未指定内容"); }
                            favBll.U_Del(litemu.userId, Mid, type);
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    case "user_star_list":
                        {
                            string where = "owner=" + litemu.userId;
                            DataTable dt = DBCenter.Sel("ZL_Favorite", where, "FavoriteID DESC");
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = JsonConvert.SerializeObject(dt);
                        }
                        break;
                    case "user_point_list"://获取指定虚拟币日志
                        {
                            int stype = DataConvert.CLng(Req("stype"));
                            B_User_ExpHis hisBll = new B_User_ExpHis();
                            PageSetting setting = hisBll.SelPage(CPage, PSize, new Com_Filter()
                            {
                                type = stype.ToString(),
                                uids = litemu.userId.ToString()
                            });
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = JsonConvert.SerializeObject(setting.dt);
                            retMod.page = new M_API_Page(setting);
                        }
                        break;
                    case "user_cash_add"://积分提现
                        {
                            //1积分兑1元，提现只能是100的倍数。
                            double min = 100;
                            double money = DataConvert.CDouble(Req("money"));
                            double money_fee = money * 0.0;//10%
                            double money_wd = money - money_fee;
                            //string passwd = ZoomLa.Common.StringHelper.MD5(Req("passwd"));
                            if (money < 1) { throw new Exception("提现金额不正确"); }
                            if (mu.Purse < money) { throw new Exception("用户余额不足"); }
                            //if (!mu.UserPwd.Equals(passwd)) { throw new Exception("提现密码不正确"); }
                            if (money < min) { throw new Exception("提现金额必须>=[" + min + "]"); }
                            if ((money % min) != 0) { throw new Exception("提现金额必须为[" + min + "]的倍数"); }
                            M_User_Bank bankMod = bankBll.SelReturnModel(DataConvert.CLng(Req("bankid")));
                            if (bankMod == null) { throw new Exception("提现账户信息不存在"); }
                            //生成提现单据,等待后台审核

                            M_Cash cashMod = new M_Cash();
                            cashMod.UserID = mu.UserID;
                            cashMod.money = money_wd;
                            cashMod.WithDrawFee = money_fee;
                            cashMod.YName = mu.UserName;

                            cashMod.CardType = bankMod.CardType;
                            cashMod.Account = bankMod.CardNum;
                            cashMod.Bank = bankMod.BankName;
                            cashMod.PeopleName = bankMod.PeopleName;
                            //cashMod.Remark = Request.Form["Remark_T"];

                            buser.MinusVMoney(mu.UserID, money_wd, M_UserExpHis.SType.Purse, "申请提现");
                            if (money_fee > 0)
                            {
                                buser.MinusVMoney(mu.UserID, money_fee, M_UserExpHis.SType.Purse, "提现手续费");
                            }
                            cashBll.insert(cashMod);
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    /**
                   * @api {get} /action=user_cash_list    提现记录列表
                   * @apiName  提现记录列表
                   * @apiGroup 商城应用
                   *
                   */
                    case "user_cash_list":
                        {
                            PageSetting setting = cashBll.SelPage(CPage, PSize, new Com_Filter() { uids = mu.UserID.ToString() });
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = JsonConvert.SerializeObject(setting.dt);
                            retMod.page = new M_API_Page(setting);
                        }
                        break;
                    /**
                   * @api {post} /action=user_bank_add    增加提现记录
                   * @apiName  增加提现记录
                   * @apiGroup 商城应用
                   *
                   * @apiParam {String} CardType    卡类型
                   * @apiParam {String} BankName    银行名称如`中国人民银行`
                   * @apiParam {String} PeopleName  持卡人姓名
                   * @apiParam {String} CardNum     卡号
                   * @apiParam {String} Remark      卡备注
                   * @apiParam {String} openid       当前用户Openid
                   *
                   *
                   */
                    case "user_bank_add":
                        {
                            M_User_Bank bankMod = bankBll.SelReturnModel(Mid);
                            if (bankMod == null) { bankMod = new M_User_Bank(); }
                            bankMod.CardType = Req("CardType");
                            bankMod.BankName = Req("BankName");
                            bankMod.PeopleName = Req("PeopleName");
                            bankMod.CardNum = Req("CardNum");
                            bankMod.Remark = Req("Remark");
                            bankMod.QRCode = Req("QRCode");
                            if (string.IsNullOrEmpty(bankMod.BankName)) { throw new Exception("银行名称不能为空"); ; }
                            if (string.IsNullOrEmpty(bankMod.PeopleName)) { throw new Exception("用户名称不能为空"); }
                            if (string.IsNullOrEmpty(bankMod.CardNum)) { throw new Exception("银行卡号不能为空"); }
                            if (bankMod.ID > 0)
                            {
                                if (bankMod.UserID != mu.UserID) { throw new Exception("你无权修改该信息"); }
                                bankBll.UpdateByID(bankMod);
                            }
                            else
                            {
                                bankMod.UserID = mu.UserID;
                                bankBll.Insert(bankMod);
                            }
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    /**
                   * @api {post} /action=user_bank_del    删除提现记录
                   * @apiName  删除提现记录
                   * @apiGroup 商城应用
                   *
                   * @apiParam {String} bankMod    银行名称
                   *
                   */
                    case "user_bank_del":
                        {
                            bankBll.Del(Mid);
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    /**
                   * @api {get} /action=user_bank_list    银行帐号列表
                   * @apiName  银行帐号列表
                   * @apiGroup 商城应用
                   *
                   * @apiParam {String} bankMod    银行名称
                   *
                   */
                    case "user_bank_list":
                        {
                            DataTable dt = bankBll.Sel(mu.UserID);
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = JsonConvert.SerializeObject(dt);
                        }
                        break;
                    case "user_bank_get":
                        {
                            M_User_Bank bankMod = bankBll.SelReturnModel(Mid);
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = JsonConvert.SerializeObject(bankMod);
                        }
                        break;
                    /**
                   * @api {get} /action=user_money_recharge    用户余额充值
                   * @apiName  用户余额充值
                   * @apiGroup 商城应用
                   *
                   * @apiParam {String} money    金额数
                   * @apiParam {String} openid   当前用户openid
                   *
                   */
                    case "user_money_recharge":
                        {
                            M_LiteUser liteMod = liteBll.SelReturnModel(mu.UserID);
                            double money = DataConvert.CDouble(Req("money"));
                            if (money < 1) { throw new Exception("金额不正确"); }
                            //生成充值支付订单,返回支付信息
                            M_OrderList orderMod = orderBll.NewOrder(mu, M_OrderList.OrderEnum.Purse);
                            orderMod.Balance_price = orderMod.Ordersamount = orderMod.Specifiedprice = money;
                            orderMod.id = orderBll.insert(orderMod);
                            M_Payment payMod = payBll.CreateByOrder(orderMod);
                            payMod.PlatformInfo = AppId.ToString();
                            payMod.MoneyReal = payMod.MoneyPay;
                            payMod.Remark = "";
                            payMod.PaymentID = payBll.Add(payMod);

                            //[test]
                            //payMod.MoneyReal = 0.01;
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = api.CreatePayment(liteMod, payMod);
                        }
                        break;
                    /**
                   * @api {get} /action=user_money_exchange    用户积分兑换
                   * @apiName  用户积分兑换
                   * @apiGroup 商城应用
                   *
                   * @apiParam {String} bankMod    银行名称
                   *
                   */
                    case "user_money_exchange"://暂无内容
                        {
                            double money = DataConvert.CDouble(Req("money"));
                            //if (PlugConfig.Info.SIcon_Rate <= 0) { throw new Exception("未开启兑换功能"); }
                            //if (money < 1) { throw new Exception("金额不正确"); }
                            //if ((money % PlugConfig.Info.SIcon_Rate) != 0) { throw new Exception("金额倍数不正确"); }
                            //if (mu.SilverCoin < money) { throw new Exception("没有足够的积分用于兑换"); }
                            //buser.MinusVMoney(mu.UserID, money, M_UserExpHis.SType.SIcon, "积分兑换");
                            //buser.AddMoney(mu.UserID, (money / PlugConfig.Info.SIcon_Rate), M_UserExpHis.SType.Purse, "积分兑换");
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    /**
                   * @api {get} /action=user_message_send    发送会员站内信
                   * @apiName  发送会员站内信
                   * @apiGroup 会员信息与积分处理
                   *
                   * @apiParam {Number} sid     发件人id
                   * @apiParam {Number} uid     收件人id
                   * @apiParam {String} title   消息标题
                   * @apiParam {String} content  内容正文
                   *
                   */
                    case "user_message_send": //发送会员站内信 调用方法：API/WXAPP?action=user_message_send&sid=[发件人ID]&uid=[收人ID]&title=[消息标题]&content=[消息内容]
                        {
                            //对应pc功能 /user/Message/MessageSend
                            // sid 发件人ID
                            // uid 收件人ID
                            int sid = DataConvert.CLng(Req("sid"));
                            int uid = DataConvert.CLng(Req("uid"));
                            string title = Req("title");
                            string content = Req("content");
                            M_Message msgMod = new M_Message();
                            M_UserInfo mui = new M_UserInfo(true);
                            if (uid > 0)
                            {
                                mui = buser.SelReturnModel(uid);
                            }
                            else
                            {
                                throw new Exception("请输入收件人");
                            }
                            if (!mui.IsNull) { msgMod.Incept = mui.UserID.ToString(); }
                            if (!string.IsNullOrEmpty(content))
                            {
                                msgMod.Content = content;
                            }
                            if (!string.IsNullOrEmpty(title))
                            {
                                msgMod.Title = title;
                            }
                            msgMod.Savedata = 0;
                            msgMod.status = 1;
                            msgMod.Sender = sid; msgBll.GetInsert(msgMod);
                            retMod.retmsg = "发送成功！";
                            retMod.retcode = M_APIResult.Success;

                        }
                        break;
                    /**
                   * @api {get} /action=user_message_list    获取会员站内信列表，或单条信息（按发件人）
                   * @apiName  获取会员站内信列表，或单条信息（按发件人）
                   * @apiGroup 会员信息与积分处理
                   *
                   * @apiParam {Number} sid     发件人id
                   * @apiParam {Number} MsgID   消息ID,可为空。
                   *
                   */
                    case "user_message_list":   //获取会员站内信列表，或单条信息（按发件人） 调用方法：列表：API/WXAPP?action=user_message_list&sid=[发件人ID]  单条：API/WXAPP?action=user_message_list&sid=[发件人ID]&MsgID=[站内信ID]
                        {
                            // sid 发件人ID
                            // MsgID 站内信息ID
                            int sid = DataConvert.CLng(Req("sid"));
                            int MsgID = DataConvert.CLng(Req("MsgID"));
                            M_Message msgMod = new M_Message();
                            M_UserInfo mui = new M_UserInfo(true);
                            string where = "Sender= " + sid;
                            if (MsgID > 0)
                            {
                                where += " AND MsgID=" + MsgID;
                            }
                            DataTable dt = DBCenter.Sel("ZL_Message", where);
                            retMod.result = JsonConvert.SerializeObject(dt);
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    /**
                   * @api {get} /action=user_message_list2    获取会员站内信列表，或单条信息（按收件人）
                   * @apiName  获取会员站内信列表，或单条信息（按收件人）
                   * @apiGroup 会员信息与积分处理
                   *
                   * @apiParam {Number} uid     收件人id
                   * @apiParam {Number} MsgID   消息ID,可为空。
                   *
                   */
                    case "user_message_list2":   //获取会员站内信列表，或单条信息（按收件人） 调用方法：列表：API/WXAPP?action=user_message_list&uid=[收件人ID]  单条：API/WXAPP?action=user_message_list&uid=[收件人ID]&MsgID=[站内信ID]
                        {
                            // uid 收件人ID
                            // MsgID 站内信息ID
                            int uid = DataConvert.CLng(Req("uid"));
                            int MsgID = DataConvert.CLng(Req("MsgID"));
                            //string Incept = Req("Incept");
                            M_Message msgMod = new M_Message();
                            M_UserInfo mui = new M_UserInfo(true);
                            //mui = buser.SelReturnModel(uid);
                            string where = "Incept like '%" + uid + "%'";
                            if (MsgID > 0)
                            {
                                where += " AND MsgID=" + MsgID;
                            }
                            DataTable dt = DBCenter.Sel("ZL_Message", where);
                            retMod.result = JsonConvert.SerializeObject(dt);
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    #endregion
                    #region 留言问答接口guest
                    /**
                   * @api {get} /action=guestbook_list    获取留言列表
                   * @apiName  获取留言列表
                   * @apiGroup 互动留言
                   *
                   * @apiParam {Number} uid    提交者ID-可为空
                   * @apiParam {Number} pid    主消息ID-用于调回复信息-可为空
                   *
                   */
                    case "guestbook_list": //获取留言列表，调用方法：API/WXAPP?action=guestbook_list&uid=[提交者ID-可为空]&pid=[主消息ID-用于调回复信息-可为空]
                        {
                            string uid = Req("uid");
                            string pid = Req("pid");
                            string where = "";
                            if (!string.IsNullOrEmpty(uid))
                            {
                                where = "UserID=" + Req("uid");
                                if (!string.IsNullOrEmpty(pid))
                                    where = where + " and ";
                            }
                            if (!string.IsNullOrEmpty(pid))
                                where = "ParentID=" + pid;
                            DataTable dt = DBCenter.Sel("ZL_Guestbook", where, "Gdate DESC");
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = JsonConvert.SerializeObject(dt);
                        }
                        break;
                    /**
                   * @api {post} /action=guestbook_list    提交留言
                   * @apiName  提交留言
                   * @apiGroup 互动留言
                   *
                   * @apiParam {String} model   提交信息json格式，如：`{"Parentid":0,"Cateid":1,"Userid":1,"Title":"留言标题在这里","Tcontent":"我的留言内容提交上来请你帮我审核一下","Gdate":"2020-11-02 16:11:30.613","Status":0,"IP":"::1"}`
                   *
                   */
                    case "guestbook_add": //提交留言 调用方法： Aaction=guestbook_add&model=-|"Parentid":0,"Cateid":1,"Userid":1,"Title":"留言标题在这里","Tcontent":"我的留言内容提交上来请你帮我审核一下","Gdate":"2020-11-02 16:11:30.613","Status":0,"IP":"::1"|-
                        {
                            M_GuestBook guest = JsonConvert.DeserializeObject<M_GuestBook>(Req("model"));
                            DBCenter.Insert(guest);
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    #endregion
                    #region 功能与接口
                    case "upload":
                        {
                            var file = Request.Form.Files["file"];
                            if (file == null || file.Length < 1) { throw new Exception("未指定需上传的文件"); }
                            if (SafeSC.FileNameCheck(file.FileName)) { throw new Exception("不允许上传该后缀名的文件"); }
                            string savePath = ZLHelper.GetUploadDir_System("wxapp", "images", "yyyyMMdd");
                            string filename = DateTime.Now.ToString("HHmmss") + function.GetRandomString(6, 2) + ".png";
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = SafeC.SaveFile(savePath, filename, file.OpenReadStream(), (int)file.Length);
                            switch (GetParam("type"))//需要返回的数据格式类型
                            {
                                case "weui":
                                    {
                                        string imgUrl = WXAppData.H_ImageUrl(retMod.result);
                                        string result = "{\"result\":\"" + (retMod.retcode == 1 ? 1 : 0) + "\",\"message\":\"" + retMod.retmsg + "\",\"data\": {\"url\": \"" + imgUrl + "\"}}";
                                        return Content(result);
                                    }
                                default:
                                    {
                                        return Content(retMod.ToString());
                                    }
                            }
                        }
                        break;
                    /**
                   * @api {get} /action=mcode_send    发送手机校验码用于注册
                   * @apiName  发送手机校验码用于注册
                   * @apiGroup 会员信息与积分处理
                   *
                   * @apiParam {Number} uid   用户ID,可为空。
                   *
                   * @apiDescription 金额大于0为收入|金额小于0为支出
                   *
                   */
                    case "mcode_send":
                        {
                            string mobile = Req("uname");
                            string vcode = Req("vcode");
                            string key = Req("key");
                            M_Comp_Verify verify = new M_Comp_Verify() { sid = key, token = vcode };
                            if (!VerifyHelper.Check(verify)) { retMod.retmsg = "验证码不正确"; }
                            else if (string.IsNullOrEmpty(mobile)) { retMod.retmsg = "手机号码不能为空"; }
                            else if (buser.IsExist("ume", mobile)) { retMod.retmsg = "该手机号已被注册"; }
                            else if (!RegexHelper.IsMobilPhone(mobile)) { retMod.retmsg = "手机号码格式不正确"; }
                            else
                            {
                                //[test]
                                retMod.retcode = M_APIResult.Success;
                                //string err = "";
                                //if (SendCode(mobile, out err))
                                //{
                                //    retMod.retcode = M_APIResult.Success;
                                //}
                                //else { retMod.retmsg = err; }
                            }
                        }
                        break;
                    /**
                   * @api {get} /action=config_get    加载配置文件
                   * @apiName  加载配置文件
                   * @apiGroup 会员信息与积分处理
                   *
                   * @apiParam {Number} uid   用户ID,可为空。
                   *
                   */
                    case "config_get":
                        {
                            //加载配置文件
                            string result = "";
                            string type = Req("type");
                            //switch (type)
                            //{
                            //    case "money"://金钱相关全部配置
                            //        result = JsonHelper.GetJson(
                            //            new string[] { "SIcon_Rate" },
                            //            new string[] { PlugConfig.Info.SIcon_Rate.ToString() });
                            //        break;
                            //}
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = result;
                        }
                        break;
                    /**
                   * @api {get} /action=config_get    加载当前接口状态提示
                   * @apiName  加载当前接口状态提示
                   * @apiGroup APP发布
                   *
                   * @apiDescription 加载系统信息，其配置位于后台移动-微信小程序-全局配置中，设置是否开放此提示,如显示：当前小程序或APP已经到期。
                   *
                   */
                    case "system"://加载系统信息，其配置位于后台移动-微信小程序-全局配置中，设置是否开放此提示 调用方法：API/WXAPP?apiId=[id]&apiKey=[key]&action=system
                        {
                            string result = JsonHelper.GetJson(new string[] { "tip", "tipStr" }, new string[] {
                                SiteConfig.SiteOption.WX_APP_Tip.ToString(),
                                SiteConfig.SiteOption.WX_APP_TipStr });
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = result;
                        }
                        break;
                    #endregion
                    #region 购物车
                    /**
                   * @api {post} /action=cart_num    修改购物车数量
                   * @apiName  修改购物车数量
                   * @apiGroup 商城应用
                   *
                   * @apiParam {Number} id   商品id
                   * @apiParam {Number} num  商品购买数量
                   *
                   */
                    case "cart_num"://修改购物车数量 调用方法：API/WXAPP?apiId=[id]&apiKey=[key]&action=cart_num&id=[商品ID]&num=[数量]
                        {
                            //修改购物车数量,调用方法：API/WXAPP?apiId=[id]&apiKey=[key]&action=cart_num&id=[商品ID]&num=[数量]
                            int id = DataConvert.CLng(Req("id"));
                            int num = DataConvert.CLng(Req("num"));
                            if (id < 1 || num < 1) { throw new Exception("参数不正确"); }
                            M_Cart cartMod = cartBll.SelReturnModel(id);
                            cartMod.Pronum = num;
                            cartMod.AllMoney = cartMod.Pronum * Convert.ToDouble(cartMod.FarePrice);
                            cartBll.UpdateByID(cartMod);
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    /**
                   * @api {post} /action=cart_add    增加或减少购物车数量
                   * @apiName  增加或减少购物车数量
                   * @apiGroup 商城应用
                   *
                   * @apiParam {Number} proID   商品id
                   * @apiParam {Number} proNum  商品购买数量
                   *
                   */
                    case "cart_add"://增加或减少购物车数量
                        {
                            int proID = DataConvert.CLng(Req("proid"));
                            int proNum = DataConvert.CLng(Req("pronum"), 1);
                            string op = DataConvert.CStr(Req("op"));//+ -
                            M_Product proMod = proBll.GetproductByid(proID);
                            M_Cart cartMod = cartBll.SelModelByWhere(litemu.userId, proID);
                            if (cartMod == null)
                            {
                                cartMod = new M_Cart();
                                cartMod.Cartid = litemu.userId.ToString();
                                cartMod.userid = litemu.userId;
                                cartMod.Username = litemu.userName;
                                cartMod.Pronum = 0;
                                cartMod.ProID = proMod.ID; ;
                                cartMod.Proname = proMod.Proname;
                                cartMod.StoreID = proMod.UserShopID;

                            }
                            switch (op)
                            {
                                case "-":
                                    cartMod.Pronum -= proNum;
                                    break;
                                default:
                                    cartMod.Pronum += proNum;
                                    break;
                            }
                            if (cartMod.Pronum < 1) { cartMod.Pronum = 1; }
                            cartMod.FarePrice = proMod.LinPrice.ToString();
                            cartMod.AllMoney = cartMod.Pronum * proMod.LinPrice;
                            if (cartMod.ID > 0) { cartBll.UpdateByID(cartMod); }
                            else { cartBll.insert(cartMod); }
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    /**
                   * @api {post} /action=cart_del    删除购物车（根据id或ids）
                   * @apiName  删除购物车（根据id或ids）
                   * @apiGroup 商城应用
                   *
                   * @apiParam {Number} id   商品id
                   * @apiParam {Number} ids  商品id,如`1,2,3`
                   *
                   */
                    case "cart_del": //删除购物车（根据id或ids） 调用方法：API/WXAPP?action=cart_del&id=商品id（API/WXAPP?action=cart_del&ids=商品1,商品2）
                        {
                            string ids = Req("ids");
                            if (string.IsNullOrEmpty(ids)) { ids = Req("id"); }
                            cartBll.U_DelByIDS(ids, litemu.userId);
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    //{case "cart_list"://单店版
                    //    {
                    //        DataTable dt = SelByCartID(litemu.userId);
                    //        for (int i = 0; i < dt.Rows.Count; i++)
                    //        {
                    //            dt.Rows[i]["proimg"] = WXAppData.H_ImageUrl(DataConvert.CStr(dt.Rows[i]["proimg"]));
                    //        }
                    //        retMod.retcode = M_APIResult.Success;
                    //        retMod.addon = JsonHelper.GetJson(new string[] { "money_exp" }, new string[] { "8" });
                    //        retMod.result = JsonConvert.SerializeObject(dt);
                    //    }
                    //    break;}
                    /**
                   * @api {post} /action=cart_del    多店铺购物车
                   * @apiName  多店铺购物车
                   * @apiGroup 商城应用
                   *
                   * @apiParam {Number} openid     当前用户的openid
                   *
                   */
                    case "cart_list":
                        {
                            OrderCommon orderCom = new OrderCommon();
                            ZoomLaCMS.Models.Cart.VM_CartOrder vmMod = new ZoomLaCMS.Models.Cart.VM_CartOrder();
                            vmMod.CartDT = SelByCartID(new Com_Filter() { uids = litemu.userId.ToString() });
                            vmMod.StoreDT = SelStoreDT(vmMod.CartDT);
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = JsonConvert.SerializeObject(vmMod);
                        }
                        break;
                    /**
                   * @api {post} /action=cart_order    选定商品后,在该块计算运费,生成订单,指定地址,确定支付形式
                   * @apiName  选定商品后,在该块计算运费,生成订单,指定地址,确定支付形式
                   * @apiGroup 商城应用
                   *
                   */
                    case "cart_order"://选定商品后,在该块计算运费,生成订单,指定地址,确定支付形式
                        {
                            B_Shop_FareTlp fareBll = new B_Shop_FareTlp();
                            ZoomLaCMS.Models.Cart.VM_CartOrder vmMod = new ZoomLaCMS.Models.Cart.VM_CartOrder();
                            OrderCommon orderCom = new OrderCommon();
                            vmMod.CartDT = SelByCartID(new Com_Filter() { ids = Req("ids"), uids = mu.UserID.ToString() });
                            vmMod.StoreDT = SelStoreDT(vmMod.CartDT);
                            //根据条件核算是否免邮
                            vmMod.StoreDT.Columns.Add(new DataColumn("fareDT", typeof(string)));
                            for (int i = 0; i < vmMod.StoreDT.Rows.Count; i++)
                            {
                                DataTable fareDT = fareBll.Page_GetFareDT(vmMod.CartDT, DataConvert.CLng(vmMod.StoreDT.Rows[i]["ID"]));
                                vmMod.StoreDT.Rows[i]["fareDT"] = Newtonsoft.Json.JsonConvert.SerializeObject(fareDT);
                            }
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = JsonConvert.SerializeObject(vmMod);
                        }
                        break;
                    #endregion
                    #region MarkDown模块
                    /**
                   * @api {get} /action=markdown    Markdown写作模块数据调用
                   * @apiName  Markdown写作模块数据调用
                   * @apiGroup 办公能力
                   *
                   * @apiParam {Number} id   Markdown内容ID
                   *
                   */
                    case "markdown":    //Markdown写作模块数据调用 调用方法：API/WXAPP?action=markdown&id=[id]
                        {
                            string id = Req("id");
                            string mdname = Req("mdname");
                            string where = "";
                            if (!string.IsNullOrEmpty(id))
                            {
                                where = "id=" + id;
                                if (!string.IsNullOrEmpty(mdname))
                                {
                                    where += " and ";
                                }
                            }

                            if (!string.IsNullOrEmpty(mdname))
                            {
                                where += " MDname='" + mdname + "'";
                            }
                            DataTable dt = DBCenter.Sel("ZL_MarkDown", where);
                            retMod.result = JsonConvert.SerializeObject(dt);
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    /**
                   * @api {post} /action=markdown_add    Markdown提交模块
                   * @apiName  Markdown写作模块数据调用
                   * @apiGroup 办公能力
                   *
                   * @apiParam {String} model   Markdown内容提交Json，如：`{"AdminID":0,"UserID":0,"MDName":"admin","MDRemarks":"3","MDUploat_date":"2020-10-16 17:23:39.910","MDPath":"12","MDStatus":"0","MDPosition":"container-md","MDColor":"white","MDlocation":"Top"}`
                   *
                   * @apiDescription 方法类似添加评论接口
                   */
                    case "markdown_add":  //Markdown提交模块，方法类似添加评论接口 调用方法：API/WXAPP?action=markdown_add&model=-|"AdminID":0,"UserID":0,"MDName":"admin","MDRemarks":"3","MDUploat_date":"2020-10-16 17:23:39.910","MDPath":"12","MDStatus":"0","MDPosition":"container-md","MDColor":"white","MDlocation":"Top"|-
                        {
                            ZoomLa.Model.MarkDown.M_MarkDown cmtMod = JsonConvert.DeserializeObject<ZoomLa.Model.MarkDown.M_MarkDown>(Req("model"));
                            string id = Req("id");
                            if (string.IsNullOrEmpty(id))
                            {
                                id = "0";
                            }
                            cmtMod.MDUpload_date = DateTime.Now;
                            DBCenter.UpdateByID_new(cmtMod, Convert.ToInt32(id));
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    #endregion
                    #region 问卷调查
                    /**
                   * @api {get} /action=vote_ask    问卷-用户提交问题列表
                   * @apiName  问卷-用户提交问题列表
                   * @apiGroup 问卷调查
                   *
                   * @apiParam {Number} id   问卷ID,必填。
                   *
                   */
                    case "vote_ask": //获取问卷主问题列表，此列表下会有各个子问题，用于收集问题提交 调用方法：API/WXAPP?action=vote_ask&id=[问卷ID]
                        {
                            string id = Req("id");
                            string where = "";
                            if (!string.IsNullOrEmpty(id))
                            {
                                where = "id=" + id;
                            }

                            DataTable dt = DBCenter.Sel("ZL_Design_Ask", where += " and ZStatus=99");
                            retMod.result = JsonConvert.SerializeObject(dt);
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    /**
                   * @api {get} /action=vote_question    获取问题列表-分别归属于不同的问卷下
                   * @apiName  获取问题列表-分别归属于不同的问卷下
                   * @apiGroup 问卷调查
                   *
                   * @apiParam {Number} id   问题ID,必填。
                   * @apiParam {Number} askid   问卷ID。
                   *
                   */
                    case "vote_question": //获取问题列表-分别归属于不同的问卷下 调用方法：API/WXAPP?action=vote_question&id=[问题ID]&askid=[问卷ID]
                        {
                            string id = Req("id");
                            string askid = Req("askid");
                            string where = "";
                            if (!string.IsNullOrEmpty(id))
                            {
                                where = "id=" + id;
                                if (!string.IsNullOrEmpty(askid))
                                {
                                    where += " and ";
                                }
                            }

                            if (!string.IsNullOrEmpty(askid))
                            {
                                where += " AskID='" + askid + "'";
                            }
                            DataTable dt = DBCenter.Sel("ZL_Design_Question", where);
                            retMod.result = JsonConvert.SerializeObject(dt);
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    /**
                   * @api {get} /action=vote_answer    获取问卷结果列表-用户提交结果列表
                   * @apiName  获取问卷结果列表
                   * @apiGroup 问卷调查
                   *
                   * @apiParam {Number} id   问题ID,必填。
                   * @apiParam {Number} askid   问卷ID。
                   *
                   */
                    case "vote_answer": //获取问卷结果列表，即用户提交结果列表 调用方法：API/WXAPP?&action=vote_answer&id=1&askid=1
                        {
                            string id = Req("id");
                            string askid = Req("askid");
                            string where = "";
                            if (!string.IsNullOrEmpty(id))
                            {
                                where = "id=" + id;
                                if (!string.IsNullOrEmpty(askid))
                                {
                                    where += " and ";
                                }
                            }

                            if (!string.IsNullOrEmpty(askid))
                            {
                                where += " AskID='" + askid + "'";
                            }
                            DataTable dt = DBCenter.Sel("ZL_Design_Answer", where);
                            retMod.result = JsonConvert.SerializeObject(dt);
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    /**
                   * @api {post} /action=vote_add    修改或提交问卷
                   * @apiName  修改或提交问卷
                   * @apiGroup 问卷调查
                   *
                   * @apiParam {String} mu   问卷提交json格式，如：`{"AskID":2,"Answer":"[{'qid':'1','qtype':'radio','answer':'5514'},{'qid':'2','qtype':'radio','answer':'11826'},{'qid':'3','qtype':'radio','answer':'3845'}]","Remin":"","ZType":"0","Zstatus":"0","IP":"8.8.8.1","Source":"","UserID":"12","CDate":"2020-10-26 15:48:20.053"}`。
                   *
                   */
                    case "vote_add":
                        {

                            //ZoomLa.Model.Design.M_Design_Ask cmtMod = JsonConvert.DeserializeObject<ZoomLa.Model.Design.M_Design_Ask>(Req("mu")); //cmtMod自定义方法名
                            ZoomLa.Model.Design.M_Design_Answer cmtMod = JsonConvert.DeserializeObject<ZoomLa.Model.Design.M_Design_Answer>(Req("mu"));
                            string id = Req("id");
                            if (string.IsNullOrEmpty(id) || id == "0")
                            {
                                DBCenter.Insert(cmtMod);
                            }
                            else
                            {
                                DBCenter.UpdateByID_new(cmtMod, Convert.ToInt32(id));
                            }
                            //cmtMod.SurveyAdd_Submit = DateTime.Now;
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    #endregion
                    #region 订单
                    /**
                   * @api {get} /action=order_get    指定ID订单列表
                   * @apiName  指定ID订单列表
                   * @apiGroup 商城应用
                   *
                   * @apiParam {Number} id   订单ID
                   *
                   */
                    case "order_get": //获取订单 调用方法：API/WXAPP?action=order_get&id=[订单id]
                        {
                            int id = DataConvert.CLng(Req("id"));
                            M_OrderList orderMod = orderBll.SelReturnModel(id);
                            if (orderMod == null) { throw new Exception("订单不存在"); }
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = JsonConvert.SerializeObject(orderMod);
                        }
                        break;
                    /**
                   * @api {get} /action=order_list    订单列表
                   * @apiName  订单列表
                   * @apiGroup 商城应用
                   *
                   * @apiParam {Number} id   订单ID
                   * @apiParam {Number} openid   当前用户openid
                   * @apiParam {String} fast   订单状态，如`needpay`
                   *
                   */
                    case "order_list":
                        {
                            string fast = Req("fast");
                            string where = "OrderStatus>=0 AND A.Aside=0 AND Userid=" + litemu.userId;
                            switch (fast)
                            {
                                case "needpay":
                                    where += " AND A.PaymentStatus=0";
                                    break;
                                case "receive"://已支付,已发货或未发货
                                    where += " AND A.PaymentStatus=1 AND A.StateLogistics IN (0,1)";
                                    break;
                                case "payed":
                                    where += " AND A.PaymentStatus=1";
                                    break;
                                default:
                                    break;
                            }
                            if (DataConvert.CLng(Req("id")) > 0)
                            {
                                where += " AND ID=" + Req("id");
                            }
                            string fields = "A.*";
                            fields += ",(SELECT Title FROM ZL_CommonModel WHERE GeneralID=A.StoreID) AS storeName";
                            PageSetting setting = new PageSetting()
                            {
                                cpage = CPage,
                                psize = PSize,
                                t1 = "ZL_OrderInfo",
                                where = where,
                                order = "ID DESC",
                                fields = fields
                            };
                            DBCenter.SelPage(setting);
                            //服务端处理状态,避免客户端解析
                            setting.dt.Columns.Add(new DataColumn("OrderStatusStr", typeof(string)));
                            for (int i = 0; i < setting.dt.Rows.Count; i++)
                            {
                                DataRow dr = setting.dt.Rows[i];
                                dr["OrderStatusStr"] = OrderHelper.GetStatus(dr, OrderHelper.TypeEnum.Order);
                                if (DataConvert.CLng(dr["StoreID"]) == 0) { dr["storeName"] = "自营商城"; }
                            }
                            retMod.retcode = M_APIResult.Success;
                            retMod.page = new M_API_Page(setting);
                            //--------附加上购物车数据
                            string ids = StrHelper.GetIDSFromDT(setting.dt, "ID");
                            if (!string.IsNullOrEmpty(ids))
                            {
                                DataTable cartDT = DBCenter.SelWithField("ZL_CartProView", "CartId,ProID,AllMoney,Thumbnails,ProName,Pronum,ID", "ID IN (" + ids + ")");
                                retMod.addon = cartDT;
                            }
                            retMod.result = JsonConvert.SerializeObject(setting.dt);
                        }
                        break;
                    /**
                   * @api {post} /action=order_del    根据id删除订单
                   * @apiName  根据id删除订单
                   * @apiGroup 商城应用
                   *
                   * @apiParam {Number} id   订单ID
                   *
                   * @apiDescription 用于将`ZL_Orderinfo.orderStatus`定义为`-5`，代表已经删除此订单于回收站
                   *
                   */
                    case "order_del": //删除订单（根据订单id） 调用方法：API/WXAPP?action=order_del&id=[订单id]
                        {
                            int id = DataConvert.CLng(Req("id"));
                            DBCenter.UpdateSQL("ZL_OrderInfo", "OrderStatus=" + (int)M_OrderList.StatusEnum.CancelOrder, "ID=" + id);
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    case "order_comment_add"://添加商品评论评价
                        {
                            B_Order_Share cmtBll = new B_Order_Share();
                            M_Order_Share cmtMod = JsonConvert.DeserializeObject<M_Order_Share>(Req("model"));
                            M_OrderList orderMod = orderBll.SelReturnModel(cmtMod.OrderID);
                            if (orderMod == null) { throw new Exception("订单不存在"); }
                            if (orderMod.IsCount) { throw new Exception("订单已被评论过"); }
                            if (orderMod.Userid != cmtMod.UserID) { throw new Exception("无权评论该订单"); }
                            orderMod.IsCount = true;
                            orderBll.UpdateByID(orderMod);
                            cmtBll.Insert(cmtMod);
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    #endregion
                    #region 支付单
                    /**
                   * @api {post} /action=payment_cart    购物车生成订单后支付
                   * @apiName  购物车生成订单后支付
                   * @apiGroup 商城应用
                   *
                   * @apiParam {Number} cartIds   订单ID
                   * @apiParam {Number} openid      当前用户Openid，如`YZARLFGL8K3FRXDSMYAY`
                   * @apiParam {String} rece      地址信息，如`{"errMsg":"chooseAddress:ok","userName":"张三","nationalCode":"510000","telNumber":"020-81167888","postalCode":"510000","provinceName":"广东省","cityName":"广州市","countyName":"海珠区","detailInfo":"新港中路397号"}`
                   * @apiParam {String} fareDT      运费Json，如`[{"storeId":"1","total":"10.00"}]`
                   * @apiParam {Number} use_sicon      订单步骤
                   * @apiParam {Number} use_purse      订单状态
                   *
                   */
                    case "payment_cart":
                        {
                            //需要生成订单的购物车数据ID
                            string cartIds = DataConvert.CStr(Req("cartIds"));
                            M_UserInfo mu = buser.SelReturnModel(litemu.userId);
                            M_LiteUser liteMod = liteBll.SelReturnModel(mu.UserID);
                            DataTable cartDT = DBCenter.Sel("ZL_Cart", "ID IN (" + cartIds + ")");

                            //按店铺生成订单
                            DataTable storeDT = cartDT.DefaultView.ToTable(true, "StoreID");
                            List<M_OrderList> orderList = new List<M_OrderList>();//用于生成临时订单,统计计算(Disuse)
                            M_OrderList orderMod = orderBll.NewOrder(mu, M_OrderList.OrderEnum.Normal);
                            //无收货地址此块可注释,根据项目需求来(小程序收货地址)
                            // //{"errMsg":"chooseAddress:ok","userName":"张三","nationalCode":"510000","telNumber":"020-81167888","postalCode":"510000","provinceName":"广东省","cityName":"广州市","countyName":"海珠区","detailInfo":"新港中路397号"}
                            JObject rece = JsonConvert.DeserializeObject<JObject>(Req("rece"));
                            orderMod.Receiver = DataConvert.CStr(rece["userName"]);
                            orderMod.MobileNum = DataConvert.CStr(rece["telNumber"]);
                            orderMod.Shengfen = rece["provinceName"] + " " + rece["cityName"] + " " + rece["countyName"];
                            orderMod.Jiedao = DataConvert.CStr(rece["detailInfo"]);
                            orderMod.ZipCode = DataConvert.CStr(rece["postalCode"]);
                            DataTable fareDT = JsonConvert.DeserializeObject<DataTable>(Req("fareDT"));//storeId,name,total
                            string orderModJson = JsonConvert.SerializeObject(orderMod);
                            foreach (DataRow storeDR in storeDT.Rows)
                            {
                                M_OrderList Odata = JsonConvert.DeserializeObject<M_OrderList>(orderModJson);
                                Odata.OrderNo = B_OrderList.CreateOrderNo((M_OrderList.OrderEnum)Odata.Ordertype);
                                Odata.StoreID = Convert.ToInt32(storeDR["StoreID"]);
                                cartDT.DefaultView.RowFilter = "StoreID=" + Odata.StoreID;
                                DataTable storeCartDT = cartDT.DefaultView.ToTable();
                                DataRow[] fareDR = fareDT.Select("storeId='" + Odata.StoreID + "'");
                                Odata.Balance_price = Convert.ToDouble(storeCartDT.Compute("SUM(AllMoney)", ""));
                                if (fareDR.Length > 0)
                                {
                                    Odata.Freight = DataConvert.CDouble(fareDR[0]["total"]);//运费计算
                                    Odata.Freight_remark = DataConvert.CStr(fareDR[0]["name"]);
                                }
                                Odata.Ordersamount = Odata.Balance_price + Odata.Freight;//订单金额
                                Odata.Specifiedprice = Odata.Ordersamount; //订单金额;
                                Odata.id = orderBll.insert(Odata);
                                orderList.Add(Odata);
                            }
                            string orderIds = "";
                            foreach (var order in orderList)
                            {
                                orderIds += order.id + ",";
                            }
                            orderIds = orderIds.Trim(',');
                            //生成支付单,处理优惠券,并进入付款步骤
                            M_Payment payMod = payBll.CreateByOrder(orderList);
                            payMod.PlatformInfo = AppId.ToString();
                            payMod.PaymentID = payBll.Add(payMod);
                            payMod.UsePoint = 0;
                            payMod.UsePointArrive = 0;
                            payMod.UseSicon = DataConvert.CDouble(Req("use_sicon"));
                            payMod.UseSiconArrive = (payMod.UseSicon / 1);
                            payMod.UsePurse = DataConvert.CDouble(Req("use_purse"));
                            payMod.MoneyReal = payMod.MoneyPay = payMod.MoneyPay - payMod.UseSiconArrive - payMod.UsePointArrive - payMod.UsePurse - payMod.ArriveMoney;
                            //订单流程完成,返回支付单相关信息
                            retMod.addon = JsonHelper.GetJson(new string[] { "orderIds", "paymentId", "cartIds" }, new string[] { orderIds, payMod.PaymentID.ToString(), cartIds });
                            if (payMod.MoneyReal == 0)
                            {
                                ZoomLa.Extend.B_Ex_Order.FinalPayment("余额与积分", 0, payMod);
                                retMod.result = "{}";
                            }
                            else
                            {
                                //[test]
                                //payMod.MoneyReal = 0.01;
                                retMod.result = api.CreatePayment(liteMod, payMod);
                            }
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    /**
                   * @api {post} /action=payment_success    前端提示支付成功,减库存,购物车转移
                   * @apiName  前端提示支付成功,减库存,购物车转移
                   * @apiGroup 商城应用
                   *
                   * @apiParam {Number} id   订单ID
                   *
                   */
                    case "payment_success"://前端提示支付成功,减库存,购物车转移 调用方法：API/WXAPP?action=payment_fail&cartIds=[cartIds]&orderIds=[orderIds]
                        {
                            //前端提示支付成功,减库存,购物车转移
                            string cartIds = Req("cartIds");
                            string orderIds = Req("orderIds");
                            SafeSC.CheckIDSEx(cartIds); SafeSC.CheckIDSEx(orderIds);
                            DataTable cartDT = DBCenter.Sel("ZL_Cart", "ID IN (" + cartIds + ")");
                            DataTable orderDT = DBCenter.Sel("ZL_OrderInfo", "ID IN (" + orderIds + ") AND UserID=" + litemu.userId);
                            foreach (DataRow orderDR in orderDT.Rows)
                            {
                                M_OrderList Odata = new M_OrderList().GetModelFromReader(orderDR);
                                cartDT.DefaultView.RowFilter = "StoreID=" + Odata.StoreID;
                                DataTable storeCartDT = cartDT.DefaultView.ToTable();
                                cpBll.CopyToCartPro(mu, storeCartDT, Odata.id);
                            }
                            cartBll.DelByids(cartIds);
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    /**
                   * @api {post} /action=payment_fail    前端提示支付失败,移除支付单与订单
                   * @apiName  前端提示支付失败,移除支付单与订单
                   * @apiGroup 商城应用
                   *
                   * @apiParam {Number} id   订单ID
                   *
                   */
                    case "payment_fail": //前端提示支付失败,移除支付单与订单 调用方法：API/WXAPP?action=payment_fail&paymentId=[paymentId]&orderIds=[orderId]
                        {
                            //前端提示支付失败,移除支付单与订单
                            int paymentId = DataConvert.CLng(Req("paymentId"));
                            string orderIds = Req("orderIds");
                            SafeSC.CheckIDSEx(orderIds);
                            DBCenter.DelByWhere("ZL_OrderInfo", "ID IN(" + orderIds + ") AND UserID=" + litemu.userId);
                            DBCenter.DelByWhere(payBll.TbName, "PaymentId=" + paymentId + " AND UserID=" + litemu.userId);
                            retMod.retcode = M_APIResult.Success;
                        }
                        break;
                    /**
                   * @api {post} /action=yzcode    获取验证码用于验证接口
                   * @apiName  验证码验证接口
                   * @apiGroup 会员信息与积分处理
                   *
                   * @apiParam {String} uname   用户名
                   * @apiParam {String} upwd    用户密码
                   * @apiParam {String} key     验证码
                   * @apiParam {String} val     key所对应的验证码
                   *
                   * @apiDescription 先用`action=validateCode&key=4356ewr`获取key，再用本接口进行验证。
                   *
                   */
                    case "yzcode": //验证码验证接口 调用方法：API/WXAPP?action=validateCode&key=[key]&val=[key所对应的验证码]
                        {
                            string key = GetParam("key");
                            string val = GetParam("val");
                            if (val.ToLower().Equals(CMSCodeVerify.CodeDic[key])) return Content("1");

                        }
                        break;
                    /**
                   * @api {post} /action=validateCode    获取验证码
                   * @apiName  获取验证码
                   * @apiGroup 会员信息与积分处理
                   *
                   * @apiParam {String} key   验证码
                   *
                   */
                    case "validateCode": //获取验证码 调用方法：API/WXAPP?action=validateCode&key=[key]
                        {
                            string key = GetParam("key");
                            if (string.IsNullOrEmpty(key)) { return Content(Failed.ToString()); }
                            if (key.StartsWith("{")) { key = Newtonsoft.Json.JsonConvert.DeserializeObject<M_Comp_Verify>(key).sid; }
                            string randomcode = function.GetRandomString(SiteConfig.SiteOption.VerifyLen, SiteConfig.SiteOption.VerifyForm);
                            if (CMSCodeVerify.CodeDic.ContainsKey(key)) { CMSCodeVerify.CodeDic[key] = randomcode.ToLower(); }
                            else { CMSCodeVerify.CodeDic.Add(key, randomcode.ToLower()); }
                            //return File(CreateImage(randomcode).);
                            MemoryStream ms = CaptchaCreate.CreateGif(randomcode);
                            return File(ms.ToArray(), "image/gif");
                        }
                        break;
                    /**
                   * @api {post} /action=register    注册验证
                   * @apiName  注册验证
                   * @apiGroup 会员信息与积分处理
                   *
                   * @apiParam {String} uname   用户名
                   * @apiParam {String} upwd    用户密码
                   * @apiParam {String} key     验证码
                   * @apiParam {String} val     key所对应的验证码
                   *
                   * @apiDescription 先用`action=validateCode&key=4356ewr`获取key，再用本接口进行验证。
                   *
                   */
                    case "register":
                        {
                            string uname = Req("uname");
                            string upwd = Req("upwd");
                            string key = Req("key");
                            string val = Req("val");
                            if (!CheckUserName(uname, ref retMod.retmsg)) { break; }
                            if (!val.ToLower().Equals(CMSCodeVerify.CodeDic[key])) { retMod.retmsg = "您输入的验证码和系统产生的不一致，请重新输入"; break; }
                            M_UserInfo newmu = buser.NewUser(uname, upwd, "");
                            newmu.HoneyName = Req("uname");
                            newmu.GroupID = 1;
                            newmu.UserID = buser.Add(newmu);
                            if (newmu.UserID > 0)
                            {
                                retMod.result = JsonConvert.SerializeObject(newmu);
                                retMod.retmsg = "注册成功";
                                retMod.retcode = M_APIResult.Success;
                            }
                            else
                            {
                                retMod.retmsg = "注册失败";
                                retMod.retcode = -1;
                            }
                        }
                        break;
                    /**
                   * @api {post} /action=register_API    注册信息验证
                   * @apiName  注册信息验证
                   * @apiGroup 会员信息与积分处理
                   *
                   */
                    case "register_API":
                        {
                            string actionCheck = GetParam("actionCheck");
                            string value = GetParam("value").Replace(" ", "");
                            switch (actionCheck)
                            {
                                case "uname":
                                    if (!CheckUserName(value, ref retMod.retmsg))
                                    {
                                        retMod.retcode = M_APIResult.Failed;
                                    }
                                    else
                                    {
                                        retMod.retcode = 1;
                                    }
                                    break;
                                case "mobile"://手机号不可重复
                                    {
                                        string mobile = GetParam("mobile");
                                        if (string.IsNullOrEmpty(mobile))
                                        {
                                            retMod.retmsg = "手机号码不能为空";
                                        }
                                        else if (!RegexHelper.IsMobilPhone(mobile))
                                        {
                                            retMod.retmsg = "手机号码格式不正确";
                                        }
                                        else
                                        {
                                            bool flag = DBCenter.IsExist("ZL_UserBase", "Mobile=@mobile",
                                                              new List<SqlParameter>() { new SqlParameter("mobile", mobile) });
                                            if (flag) { retMod.retmsg = "手机号码已存在"; }
                                            else { retMod.retcode = M_APIResult.Success; }
                                        }
                                    }
                                    break;
                                case "puser"://推荐人为空则不检测
                                    if (!string.IsNullOrEmpty(value) && CheckParentUser(value).IsNull)
                                    {
                                        retMod.retcode = M_APIResult.Failed;
                                        retMod.retmsg = "推荐人不存在";
                                    }
                                    else
                                    {
                                        retMod.retcode = M_APIResult.Success;
                                    }
                                    break;
                                case "email":
                                    if (!CheckEmail(value, ref retMod.retmsg))
                                    {
                                        retMod.retcode = M_APIResult.Failed;
                                    }
                                    else
                                    {
                                        retMod.retcode = M_APIResult.Success;
                                    }
                                    break;
                                case "birth":
                                    if (!CheckBirthDay(value, ref retMod.retmsg))
                                    {
                                        retMod.retcode = M_APIResult.Failed;
                                    }
                                    else
                                    {
                                        retMod.retcode = M_APIResult.Success;
                                    }
                                    break;
                                case "GetModelFied":
                                    retMod.retmsg = GetUserGorupModel(value);
                                    break;
                                default:
                                    retMod.retmsg = "[" + actionCheck + "]接口不存在";
                                    break;
                            }
                        }
                        break;
                    #endregion
                    #region 自然资源厅工会专用接口
                    /**
                   * @api {get} /action=structure_list    企业结构接口,读表ZL_Structure
                   * @apiName  企业结构接口,读表ZL_Structure
                   * @apiGroup 办公能力
                   *
                   * @apiParam {Number} uid   用户ID,可为空。
                   *
                   */
                    case "structure_list":
                        {
                            string uid = Req("uid");
                            string where = "";
                            if (!string.IsNullOrEmpty(uid))
                                where = "UserIDS like '%," + Req("uid")+"' or UserIDS like '"+Req("uid")+",%' or UserIDS like '%,"+Req("uid")+",%' or UserIDS ='"+Req("uid")+"'";
                            DataTable dt = DBCenter.Sel("ZL_Structure",where, "");
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = JsonConvert.SerializeObject(dt);
                        }
                        break;
                    /**
                   * @api {get} /action=structure_entuser    获取同企业会员-读表ZL_Structure
                   * @apiName  获取同企业会员-读表ZL_Structure
                   * @apiGroup 办公能力
                   *
                   * @apiParam {Number} uid   用户ID,可为空。
                   *
                   * @apiDescription `structure_list` 的条件是UserIDS,所以会输出UserIDS中含有uid的行;`structure_entuser` 的条件是ParentID,所以会输出UserIDS中含有uid的相同ParentID的行
                   *
                   */
                    case "structure_entuser":
                        {
                            string uid = Req("uid");
                            string where = "";
                            if (!string.IsNullOrEmpty(uid))
                                where = "ParentID=(select ParentID from ZL_Structure where UserIDS like '%," + Req("uid")+"' or UserIDS like '"+Req("uid")+",%' or UserIDS like '%,"+Req("uid")+",%' or UserIDS ='"+Req("uid")+"')";
                            DataTable dt = DBCenter.Sel("ZL_Structure",where, "");
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = JsonConvert.SerializeObject(dt);
                        }
                        break;
                    /**
                   * @api {get} /action=plat_list    能力中心企业列表
                   * @apiName  能力中心企业列表
                   * @apiGroup 办公能力
                   *
                   * @apiParam {Number} uid   用户ID,可为空。
                   *
                   */
                    case "plat_list": //
                        {
                            string uid = Req("uid");
                            string where = "";
                            DataTable dt = DBCenter.Sel("ZL_EX_D1", where, " UserExp desc");
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = JsonConvert.SerializeObject(dt);
                        }
                        break;
                    case "plat_user": //获取同企业会员按积分倒序排名
                        {

                        }
                        break;
                    case "maps":    //一标三实获取zl_masp的副表模型
                        {
                            int nid = DataConvert.CLng(Req("nid"));
                            int cpage = DataConvert.CLng(Req("cpage"), 1);
                            int psize = DataConvert.CLng(Req("psize"), 10);
                            PageSetting setting = new PageSetting() { cpage = cpage, psize = psize };
                            setting.t1 = "ZL_CommonModel";
                            setting.t2 = "ZL_C_maps";
                            setting.fields = "A.Title,A.GeneralID,B.api,B.appid,B.secret,B.i3dtitle,B.dlzb1,B.dlzb2,B.dlzb3,B.trans";
                            setting.where = "A.EliteLevel=1 AND A.Status=99 AND NodeID IN="+nid ;
                            setting.order = "CreateTime DESC";
                            setting.on = "A.ItemID=B.ID";
                            DBCenter.SelPage(setting);
                            retMod.retcode = M_APIResult.Success;
                            retMod.result = JsonConvert.SerializeObject(setting.dt);
                        }
                        break;
                    #endregion
                    default:
                        {
                            retMod.retmsg = "[" + action + "]接口不存在";
                        }
                        break;
                }
            }
            catch (Exception ex) { ZLLog.L("[" + action + "]" + (litemu == null) + "|" + OpenId + "|" + ex.Message); retMod.retmsg = ex.Message; }
            retMod.callback = GetParam("callback");
            return Content(retMod.ToString());
        }
        //============================================================================================================
        //首页使用
        public class Packet_Index
        {
            public object swiper = "[]";
            public DataTable list = new DataTable();
            public DataTable prolist = new DataTable();
            public string addon = "";
        }

        //PS社区首页使用
        public class PS_Index
        {
            public DataTable nodelist = new DataTable();
            public DataTable homeswiper = new DataTable();
            public DataTable toollist = new DataTable();
            public DataTable parentlist = new DataTable();
            public DataTable parentlist2 = new DataTable();
            public DataTable newsNode = new DataTable();
            public DataTable newsMode = new DataTable();
        }

        //获取内容列表
        private PageSetting GetCommonList(int nid = 0, int pnid = 0, int pcount = 20, int elite = 0, int modelId = 0, string nids = "")
        {
            modelId = Mid;
            if (pnid > 0)
            {
                DataTable nodeDT = nodeBll.SelByPid(pnid, true);
                nids = StrHelper.GetIDSFromDT(nodeDT, "NodeID");
            }
            //----------------------
            if (modelId < 1)
            {
                object modelIds = null;
                if (nid > 0)
                {
                    modelIds = DBCenter.ExecuteScala("ZL_Node", "ContentModel", "NodeID=" + nid);
                }
                else if (pnid > 0)
                {
                    modelIds = DBCenter.ExecuteScala("ZL_Node", "ContentModel", "NodeID=" + pnid);
                }
                else if (!string.IsNullOrEmpty(nids))
                {
                    int nodeId = DataConvert.CLng(nids.Split(',')[0]);
                    modelIds = DBCenter.ExecuteScala("ZL_Node", "ContentModel", "NodeID=" + nodeId);
                }
                modelId = DataConvert.CLng(DataConvert.CStr(modelIds).Split(',')[0]);
            }
            PageSetting setting = new PageSetting() { cpage = CPage, psize = pcount };
            setting.pk = "GeneralID";
            setting.t1 = "ZL_CommonModel";
            setting.on = "A.ItemID=B.ID";
            setting.fields = "A.GeneralID,A.Title,A.CreateTime,A.Inputer,A.TopImg";
            setting.fields += ",B.*";//以B.pic为准
            setting.where = "A.Status=99 ";
            if (nid > 0) { setting.where += " AND A.NodeID=" + nid; }
            if (modelId > 0) { setting.where += " AND A.ModelID=" + modelId; }
            if (elite > 0) { setting.where += " AND A.EliteLevel=1 "; }
            if (!string.IsNullOrEmpty(nids))
            {
                SafeSC.CheckIDSEx(nids);
                setting.where += " AND NodeID IN (" + nids + ")";
            }
            if (!string.IsNullOrEmpty(ids))
            {
                SafeSC.CheckDataEx(ids);
                setting.where += " AND A.GeneralID IN (" + ids + ")";
            }
            setting.order = "A.OrderID DESC,A.GeneralID DESC";
            setting.t2 = DataConvert.CStr(DBCenter.ExecuteScala("ZL_Model", "TableName", "ModelID=" + modelId));

            DBCenter.SelPage(setting);
            //------------修改缩略图路径(统一使用Pic字段)

            for (int i = 0; i < setting.dt.Rows.Count; i++)
            {
                DataRow dr = setting.dt.Rows[i];
                dr["TopImg"] = WXAppData.H_ImageUrl(DataConvert.CStr(dr["TopImg"]));
                if (setting.dt.Columns.Contains("pic")) { dr["pic"] = WXAppData.H_ImageUrl(DataConvert.CStr(dr["pic"])); }
            }

            setting.dt.Columns.Remove("ID");
            return setting;
        }

        //获取节点列表
        private DataTable GetNodeList(int pid)
        {
            string where = "1=1 ";
            if (pid != -100) { where += " AND ParentID=" + pid; }
            if (!string.IsNullOrEmpty(ids)) { SafeSC.CheckIDSEx(ids); where += " AND NodeID IN (" + ids + ")"; }
            return DBCenter.Sel("ZL_Node", where, "OrderID ASC,NodeID ASC");
        }

        private string Req(string name) { return GetParam(name); }
        #region Tools


        //==========================================Logical
        private DataTable SelByCartID(Com_Filter filter)
        {
            string fields = "A.id,A.proid,A.pronum,A.storeid,A.AllMoney,A.FarePrice AS FarePrice1";
            fields += ",B.Weight,B.proname,B.LinPrice as price,B.Thumbnails as proimg";
            string where = "1=1 ";
            //SqlParameter[] sp = new SqlParameter[] { new SqlParameter("cartid", cartid) };
            //if (uid > 0) { where = " (A.Cartid=@cartid OR A.UserID=" + uid + ")"; } else { where = " A.Cartid=@cartid"; }
            if (!string.IsNullOrEmpty(filter.uids))
            {
                where += " AND A.UserID IN (" + filter.uids + ")";
            }
            if (!string.IsNullOrEmpty(filter.ids))
            {
                where += " AND A.ID IN (" + filter.ids + ")";
            }

            where += " AND B.LinPrice IS NOT NULL";
            //--------------------------------------
            string sql = "SELECT " + fields + " FROM ZL_Cart A LEFT JOIN ZL_Commodities B ON A.ProID=B.ID WHERE " + where;
            //自营商品,店铺商品
            DataTable dt = SqlHelper.ExecuteTable(sql, null);
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                DataRow dr = dt.Rows[i];
                dr["proimg"] = WXAppData.H_ImageUrl(DataConvert.CStr(dr["proimg"]));
            }
            return dt;
        }
        private DataTable SelStoreDT(DataTable cartDT)
        {
            OrderCommon orderCom = new OrderCommon();
            DataTable storeDT = orderCom.SelStoreDT(cartDT);
            if (cartDT.Select("storeID=0").Length == 0)
            {
                storeDT.DefaultView.RowFilter = "ID>0";
                storeDT = storeDT.DefaultView.ToTable();
            }
            return storeDT;
        }
        #endregion
        /// <summary>
        /// 获取用户的openid
        /// *开发环境下也可获取到openid
        /// </summary>
        private string GetOpenIdByCode(string code, int appId)
        {
            M_WX_APPID appMod = new B_WX_APPID().SelReturnModel(appId);
            if (string.IsNullOrEmpty(code)) { throw new Exception("未指定code"); }
            string url = "https://api.weixin.qq.com/sns/jscode2session?appid=" + appMod.APPID + "&secret=" + appMod.Secret + "&js_code=" + code + "&grant_type=authorization_code";
            string result = APIHelper.GetWebResult(url);
            if (!result.Contains("openid")) { throw new Exception("未获取到opneid:" + result + "," + code); }
            JObject json = JsonConvert.DeserializeObject<JObject>(result);
            string openid = json["openid"].ToString();
            return openid;
        }
        private string GetWeekStr(DateTime date)
        {
            string result = "";
            switch ((int)date.DayOfWeek)
            {
                case 0:
                    result = "星期日";
                    break;
                case 1:
                    result = "星期一";
                    break;
                case 2:
                    result = "星期二";
                    break;
                case 3:
                    result = "星期三";
                    break;
                case 4:
                    result = "星期四";
                    break;
                case 5:
                    result = "星期五";
                    break;
                case 6:
                    result = "星期六";
                    break;
            }
            return result;
        }
        private bool CheckUserName(string uname, ref string err)
        {
            if (string.IsNullOrEmpty(uname)) { return false; }
            uname = uname.Replace(" ", "");
            if (SiteConfig.UserConfig.UserNameLimit > uname.Length || uname.Length > SiteConfig.UserConfig.UserNameMax)
            {
                err = "用户名的长度必须小于" + SiteConfig.UserConfig.UserNameMax + "，并大于" + SiteConfig.UserConfig.UserNameLimit + "!"; return false;
            }
            else if (ZoomLa.BLL.SafeSC.CheckData(uname))
            {
                err = "用户名不能包含特殊字段!"; return false;
            }
            else if (!ZoomLa.BLL.SafeSC.CheckUName(uname))
            {
                err = "用户名不能包含特殊字符!"; return false;
            }
            if (StringHelper.FoundInArr(SiteConfig.UserConfig.UserNameRegDisabled, uname, "|"))
            {
                err = "该用户名禁止注册，请输入不同的用户名!"; return false;
            }
            if (buser.IsExistUName(uname))
            {
                err = "该用户名已被他人占用，请输入不同的用户名"; return false;
            }
            string userregrule = SiteConfig.UserConfig.RegRule;
            if (userregrule != null && userregrule != "")
            {
                if (userregrule.IndexOf(',') > -1)
                {
                    string[] rulearr = userregrule.Split(',');
                    for (int ii = 0; ii < rulearr.Length; ii++)
                    {
                        if (rulearr[ii].ToString() == "1")
                        {
                            string resultString = null;
                            try
                            {
                                resultString = Regex.Match(uname, @"[0-9]*").Value;
                            }
                            catch (ArgumentException)
                            {
                            }
                            if (uname == resultString.Trim())
                            {
                                err = "用户名不允许纯数字"; return false;
                            }
                        }

                        if (rulearr[ii].ToString() == "2")
                        {
                            string resultString = null;
                            try
                            {
                                resultString = Regex.Match(uname, @"[a-zA-Z]*").Value;
                            }
                            catch (ArgumentException)
                            {
                            }

                            if (uname == resultString)
                            {
                                err = "用户名不允许纯英文"; return false;
                            }

                        }

                        if (rulearr[ii].ToString() == "3")
                        {
                            bool foundMatch = false;
                            try
                            {
                                foundMatch = Regex.IsMatch(uname, @"[\u0391-\uFFE5]$");
                            }
                            catch (ArgumentException)
                            {
                            }

                            if (foundMatch)
                            {
                                err = "用户名不允许带有中文"; return false;
                            }
                        }
                    }
                }
                else
                {
                    if (userregrule.ToString() == "1")
                    {
                        string resultString = null;
                        try
                        {
                            resultString = Regex.Match(uname, @"[0-9]*").Value;
                        }
                        catch (ArgumentException)
                        {
                        }
                        if (uname == resultString.Trim())
                        {
                            err = "用户名不允许纯数字"; return false;
                        }
                    }
                    if (userregrule.ToString() == "2")
                    {
                        string resultString = null;
                        try
                        {
                            resultString = Regex.Match(uname, @"[a-zA-Z]*").Value;
                        }
                        catch (ArgumentException)
                        {
                        }

                        if (uname == resultString)
                        {
                            err = "用户名不允许纯英文"; return false;
                        }
                    }
                    if (userregrule.ToString() == "3")
                    {
                        bool foundMatch = false;
                        try
                        {
                            foundMatch = Regex.IsMatch(uname, @"[\u0391-\uFFE5]$");
                        }
                        catch (ArgumentException)
                        {
                        }

                        if (foundMatch)
                        {
                            err = "用户名不允许带有中文"; return false;
                        }
                    }
                }
            }
            return true;
        }
        //推荐人是否存在支持ID与用户名(也支持推荐码)
        private M_UserInfo CheckParentUser(string puname)
        {
            M_UserInfo pmu = new M_UserInfo(true);
            if (string.IsNullOrEmpty(puname)) { return pmu; }
            int puid = 0;
            //避免用户以手机号注册,导致报错
            if (puname.Length < 9) { puid = DataConvert.CLng(puid); }
            //if (puid >= 100001 && puid <= 999999)//只有9级,所以只有首位需去除[delete]
            //{
            //    int depth = Convert.ToInt32(puname.Substring(0, 1));
            //    int uid = Convert.ToInt32(puname.Substring(1, (puname.Length - 1)));
            //    pmu = buser.SelReturnModel(uid);
            //    if (pmu.RoomID == 0) { pmu.RoomID = 1; }
            //    if (pmu.RoomID != depth) { return new M_UserInfo(true); }
            //}
            if (puid > 0)//100001
            {
                pmu = buser.SelReturnModel(puid);
            }
            else
            {
                pmu = buser.GetUserByName(puname);
            }
            return pmu;
        }
        private bool CheckEmail(string email, ref string err)
        {
            //邮箱非必填
            if (!SiteConfig.UserConfig.Reg_EmailMust && string.IsNullOrEmpty(email)) { return true; }
            if (string.IsNullOrEmpty(email)) { err = "邮箱不能为空"; return false; }
            if (!RegexHelper.IsEmail(email)) { err = "邮箱格式不正确"; return false; }
            if (buser.IsExist("ume", email)) { err = "该邮箱已存在"; return false; }
            return true;
        }
        //检测出生日期是否合逻辑
        private bool CheckBirthDay(string value, ref string err)
        {
            DateTime time = DateTime.Now;
            if (string.IsNullOrEmpty(value)) { err = "日期格式为空"; return false; }
            else if (!DateTime.TryParse(value, out time)) { err = "不是有效的日期格式"; return false; }
            else if (time < DateTime.Now.AddYears(-150)) { err = "您超过了150岁?-吉尼斯世界纪录最长寿的人是132岁!"; return false; }
            else if (time > DateTime.Now) { err = "日期大于当前时间"; return false; }
            return true;
        }
        //获取邮件内容模板标签格式
        private DataTable GetRegEmailDt(string username, string checknum, string checkurl)
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("CheckNum");
            dt.Columns.Add("CheckUrl");
            dt.Columns.Add("UserName");
            dt.Rows.Add(dt.NewRow());
            dt.Rows[0]["CheckNum"] = checknum;
            dt.Rows[0]["CheckUrl"] = checkurl;
            dt.Rows[0]["UserName"] = username;
            return dt;
        }
        public string GetUserGorupModel(string value)
        {
            B_Group gpBll = new B_Group();
            int gid = DataConverter.CLng(value);
            int UserModelID = DataConverter.CLng(gpBll.GetGroupModel(gid));
            ///UserModelID!=0说明绑定了户模型，用要从模型中读取字段，没有绑定就不需要读取字段
            //if (UserModelID != 0)
            //{
            //    return fieldBll.InputallHtml(UserModelID, 0, new ModelConfig()
            //    {
            //        Source = ModelConfig.SType.UserBase
            //    });
            //}
            return "";
        }


    }
}
@{
    Layout = null;
}